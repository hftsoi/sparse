// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_Softmax_config18_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        res_V_data_0_V_TREADY,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        res_V_data_0_V_TDATA_blk_n,
        res_V_data_1_V_TDATA_blk_n,
        res_V_data_2_V_TDATA_blk_n,
        res_V_data_3_V_TDATA_blk_n,
        res_V_data_4_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [21:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [21:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [21:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [21:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [21:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   res_V_data_0_V_TDATA_blk_n;
output   res_V_data_1_V_TDATA_blk_n;
output   res_V_data_2_V_TDATA_blk_n;
output   res_V_data_3_V_TDATA_blk_n;
output   res_V_data_4_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg res_V_data_0_V_TVALID;
reg res_V_data_1_V_TVALID;
reg res_V_data_2_V_TVALID;
reg res_V_data_3_V_TVALID;
reg res_V_data_4_V_TVALID;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg res_V_data_0_V_TDATA_blk_n;
reg res_V_data_1_V_TDATA_blk_n;
reg res_V_data_2_V_TDATA_blk_n;
reg res_V_data_3_V_TDATA_blk_n;
reg res_V_data_4_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op6;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table3_address0;
reg    exp_table3_ce0;
wire   [16:0] exp_table3_q0;
wire   [9:0] exp_table3_address1;
reg    exp_table3_ce1;
wire   [16:0] exp_table3_q1;
wire   [9:0] exp_table3_address2;
reg    exp_table3_ce2;
wire   [16:0] exp_table3_q2;
wire   [9:0] exp_table3_address3;
reg    exp_table3_ce3;
wire   [16:0] exp_table3_q3;
wire   [9:0] exp_table3_address4;
reg    exp_table3_ce4;
wire   [16:0] exp_table3_q4;
wire   [9:0] invert_table4_address0;
reg    invert_table4_ce0;
wire   [17:0] invert_table4_q0;
reg  signed [21:0] data_array_0_V_reg_1268;
reg  signed [21:0] data_array_1_V_reg_1273;
reg  signed [21:0] data_array_2_V_reg_1278;
reg  signed [21:0] data_array_3_V_reg_1283;
reg  signed [21:0] data_array_4_V_reg_1288;
wire   [21:0] select_ln65_2_fu_436_p3;
reg   [21:0] select_ln65_2_reg_1295;
wire   [9:0] y_V_4_fu_915_p3;
reg   [9:0] y_V_4_reg_1321;
reg   [16:0] exp_res_0_V_reg_1326;
reg   [16:0] exp_res_0_V_reg_1326_pp0_iter3_reg;
reg   [16:0] exp_res_1_V_reg_1331;
reg   [16:0] exp_res_1_V_reg_1331_pp0_iter3_reg;
reg   [16:0] exp_res_2_V_reg_1336;
reg   [16:0] exp_res_2_V_reg_1336_pp0_iter3_reg;
reg   [16:0] exp_res_3_V_reg_1341;
reg   [16:0] exp_res_3_V_reg_1341_pp0_iter3_reg;
wire  signed [17:0] p_Val2_16_fu_1069_p3;
reg  signed [17:0] p_Val2_16_reg_1351;
reg   [16:0] exp_res_4_V_reg_1357;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln225_fu_767_p1;
wire   [63:0] zext_ln225_1_fu_806_p1;
wire   [63:0] zext_ln225_2_fu_845_p1;
wire   [63:0] zext_ln225_3_fu_884_p1;
wire   [63:0] zext_ln225_4_fu_923_p1;
wire   [63:0] zext_ln235_fu_1179_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [17:0] mul_ln1118_4_fu_271_p0;
wire  signed [25:0] sext_ln241_fu_1184_p1;
wire   [16:0] mul_ln1118_4_fu_271_p1;
wire  signed [17:0] mul_ln1118_fu_272_p0;
wire   [16:0] mul_ln1118_fu_272_p1;
wire  signed [17:0] mul_ln1118_3_fu_273_p0;
wire   [16:0] mul_ln1118_3_fu_273_p1;
wire  signed [17:0] mul_ln1118_2_fu_274_p0;
wire   [16:0] mul_ln1118_2_fu_274_p1;
wire  signed [17:0] mul_ln1118_1_fu_275_p0;
wire   [16:0] mul_ln1118_1_fu_275_p1;
wire  signed [21:0] icmp_ln1496_fu_402_p0;
wire  signed [21:0] icmp_ln1496_fu_402_p1;
wire   [0:0] icmp_ln1496_fu_402_p2;
wire  signed [21:0] select_ln65_fu_408_p1;
wire  signed [21:0] select_ln65_fu_408_p2;
wire  signed [21:0] icmp_ln1496_1_fu_416_p0;
wire  signed [21:0] icmp_ln1496_1_fu_416_p1;
wire   [0:0] icmp_ln1496_1_fu_416_p2;
wire  signed [21:0] select_ln65_1_fu_422_p1;
wire  signed [21:0] select_ln65_1_fu_422_p2;
wire   [21:0] select_ln65_fu_408_p3;
wire   [21:0] select_ln65_1_fu_422_p3;
wire   [0:0] icmp_ln1496_2_fu_430_p2;
wire   [0:0] icmp_ln1496_3_fu_444_p2;
wire   [21:0] x_max_V_fu_448_p3;
wire  signed [22:0] sext_ln703_fu_454_p1;
wire  signed [22:0] sext_ln703_1_fu_457_p1;
wire   [22:0] sub_ln1193_fu_461_p2;
wire   [0:0] tmp_12_fu_475_p3;
wire   [0:0] tmp_11_fu_467_p3;
wire   [0:0] xor_ln786_fu_483_p2;
wire   [0:0] xor_ln340_fu_501_p2;
wire  signed [22:0] sext_ln703_2_fu_513_p1;
wire   [22:0] sub_ln1193_1_fu_516_p2;
wire   [0:0] tmp_14_fu_530_p3;
wire   [0:0] tmp_13_fu_522_p3;
wire   [0:0] xor_ln786_1_fu_538_p2;
wire   [0:0] xor_ln340_1_fu_556_p2;
wire  signed [22:0] sext_ln703_3_fu_568_p1;
wire   [22:0] sub_ln1193_2_fu_571_p2;
wire   [0:0] tmp_16_fu_585_p3;
wire   [0:0] tmp_15_fu_577_p3;
wire   [0:0] xor_ln786_2_fu_593_p2;
wire   [0:0] xor_ln340_2_fu_611_p2;
wire  signed [22:0] sext_ln703_4_fu_623_p1;
wire   [22:0] sub_ln1193_3_fu_626_p2;
wire   [0:0] tmp_18_fu_640_p3;
wire   [0:0] tmp_17_fu_632_p3;
wire   [0:0] xor_ln786_3_fu_648_p2;
wire   [0:0] xor_ln340_3_fu_666_p2;
wire  signed [22:0] sext_ln703_5_fu_678_p1;
wire   [22:0] sub_ln1193_4_fu_681_p2;
wire   [0:0] tmp_20_fu_695_p3;
wire   [0:0] tmp_19_fu_687_p3;
wire   [0:0] xor_ln786_4_fu_703_p2;
wire   [0:0] xor_ln340_4_fu_721_p2;
wire   [0:0] xor_ln340_5_fu_495_p2;
wire   [9:0] tmp_fu_733_p4;
wire   [0:0] and_ln786_fu_489_p2;
wire   [0:0] or_ln340_fu_507_p2;
wire   [9:0] select_ln340_fu_743_p3;
wire   [9:0] select_ln388_fu_751_p3;
wire   [9:0] y_V_fu_759_p3;
wire   [0:0] xor_ln340_6_fu_550_p2;
wire   [9:0] tmp_8_fu_772_p4;
wire   [0:0] and_ln786_1_fu_544_p2;
wire   [0:0] or_ln340_1_fu_562_p2;
wire   [9:0] select_ln340_2_fu_782_p3;
wire   [9:0] select_ln388_1_fu_790_p3;
wire   [9:0] y_V_1_fu_798_p3;
wire   [0:0] xor_ln340_7_fu_605_p2;
wire   [9:0] tmp_s_fu_811_p4;
wire   [0:0] and_ln786_2_fu_599_p2;
wire   [0:0] or_ln340_2_fu_617_p2;
wire   [9:0] select_ln340_4_fu_821_p3;
wire   [9:0] select_ln388_2_fu_829_p3;
wire   [9:0] y_V_2_fu_837_p3;
wire   [0:0] xor_ln340_8_fu_660_p2;
wire   [9:0] tmp_7_fu_850_p4;
wire   [0:0] and_ln786_3_fu_654_p2;
wire   [0:0] or_ln340_3_fu_672_p2;
wire   [9:0] select_ln340_6_fu_860_p3;
wire   [9:0] select_ln388_3_fu_868_p3;
wire   [9:0] y_V_3_fu_876_p3;
wire   [0:0] xor_ln340_9_fu_715_p2;
wire   [9:0] tmp_9_fu_889_p4;
wire   [0:0] and_ln786_4_fu_709_p2;
wire   [0:0] or_ln340_4_fu_727_p2;
wire   [9:0] select_ln340_8_fu_899_p3;
wire   [9:0] select_ln388_4_fu_907_p3;
wire   [17:0] p_Val2_6_fu_927_p1;
wire   [17:0] p_Val2_7_fu_931_p1;
wire   [17:0] p_Val2_8_fu_935_p2;
wire   [0:0] p_Result_s_fu_941_p3;
wire   [17:0] p_Val2_9_fu_957_p1;
wire   [17:0] p_Val2_10_fu_961_p1;
wire   [17:0] p_Val2_11_fu_965_p2;
wire   [0:0] p_Result_14_fu_971_p3;
wire  signed [17:0] p_Val2_12_fu_949_p3;
wire  signed [17:0] p_Val2_13_fu_979_p3;
wire  signed [18:0] rhs_V_fu_991_p1;
wire  signed [18:0] lhs_V_fu_987_p1;
wire   [18:0] ret_V_fu_995_p2;
wire   [17:0] p_Val2_15_fu_1009_p2;
wire   [0:0] p_Result_16_fu_1015_p3;
wire   [0:0] p_Result_15_fu_1001_p3;
wire   [0:0] xor_ln786_5_fu_1023_p2;
wire   [0:0] xor_ln340_11_fu_1041_p2;
wire   [0:0] xor_ln340_10_fu_1035_p2;
wire   [0:0] underflow_fu_1029_p2;
wire   [0:0] or_ln340_5_fu_1047_p2;
wire   [17:0] select_ln340_12_fu_1053_p3;
wire   [17:0] select_ln388_5_fu_1061_p3;
wire  signed [18:0] lhs_V_1_fu_1081_p1;
wire   [18:0] rhs_V_1_fu_1084_p1;
wire   [18:0] ret_V_1_fu_1088_p2;
wire   [17:0] p_Val2_17_fu_1077_p1;
wire   [17:0] p_Val2_19_fu_1102_p2;
wire   [0:0] p_Result_18_fu_1107_p3;
wire   [0:0] p_Result_17_fu_1094_p3;
wire   [0:0] xor_ln786_6_fu_1115_p2;
wire   [0:0] xor_ln340_13_fu_1133_p2;
wire   [0:0] xor_ln340_12_fu_1127_p2;
wire   [9:0] tmp_10_fu_1145_p4;
wire   [0:0] underflow_1_fu_1121_p2;
wire   [0:0] or_ln340_6_fu_1139_p2;
wire   [9:0] select_ln340_14_fu_1155_p3;
wire   [9:0] select_ln388_6_fu_1163_p3;
wire   [9:0] y_V_5_fu_1171_p3;
wire   [25:0] mul_ln1118_fu_272_p2;
wire   [25:0] mul_ln1118_1_fu_275_p2;
wire   [25:0] mul_ln1118_2_fu_274_p2;
wire   [25:0] mul_ln1118_3_fu_273_p2;
wire   [25:0] mul_ln1118_4_fu_271_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] mul_ln1118_1_fu_275_p10;
wire   [25:0] mul_ln1118_2_fu_274_p10;
wire   [25:0] mul_ln1118_3_fu_273_p10;
wire   [25:0] mul_ln1118_4_fu_271_p10;
wire   [25:0] mul_ln1118_fu_272_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_Softmax_config18_s_exp_table3 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table3_address0),
    .ce0(exp_table3_ce0),
    .q0(exp_table3_q0),
    .address1(exp_table3_address1),
    .ce1(exp_table3_ce1),
    .q1(exp_table3_q1),
    .address2(exp_table3_address2),
    .ce2(exp_table3_ce2),
    .q2(exp_table3_q2),
    .address3(exp_table3_address3),
    .ce3(exp_table3_ce3),
    .q3(exp_table3_q3),
    .address4(exp_table3_address4),
    .ce4(exp_table3_ce4),
    .q4(exp_table3_q4)
);

softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_Softmax_config18_s_invert_tbkb #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table4_address0),
    .ce0(invert_table4_ce0),
    .q0(invert_table4_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_array_0_V_reg_1268 <= data_V_data_0_V_dout;
        data_array_1_V_reg_1273 <= data_V_data_1_V_dout;
        data_array_2_V_reg_1278 <= data_V_data_2_V_dout;
        data_array_3_V_reg_1283 <= data_V_data_3_V_dout;
        data_array_4_V_reg_1288 <= data_V_data_4_V_dout;
        select_ln65_2_reg_1295 <= select_ln65_2_fu_436_p3;
        y_V_4_reg_1321 <= y_V_4_fu_915_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_res_0_V_reg_1326 <= exp_table3_q0;
        exp_res_1_V_reg_1331 <= exp_table3_q1;
        exp_res_2_V_reg_1336 <= exp_table3_q2;
        exp_res_3_V_reg_1341 <= exp_table3_q3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exp_res_0_V_reg_1326_pp0_iter3_reg <= exp_res_0_V_reg_1326;
        exp_res_1_V_reg_1331_pp0_iter3_reg <= exp_res_1_V_reg_1331;
        exp_res_2_V_reg_1336_pp0_iter3_reg <= exp_res_2_V_reg_1336;
        exp_res_3_V_reg_1341_pp0_iter3_reg <= exp_res_3_V_reg_1341;
        p_Val2_16_reg_1351 <= p_Val2_16_fu_1069_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        exp_res_4_V_reg_1357 <= exp_table3_q4;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_ce0 = 1'b1;
    end else begin
        exp_table3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_ce1 = 1'b1;
    end else begin
        exp_table3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_ce2 = 1'b1;
    end else begin
        exp_table3_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table3_ce3 = 1'b1;
    end else begin
        exp_table3_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table3_ce4 = 1'b1;
    end else begin
        exp_table3_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        invert_table4_ce0 = 1'b1;
    end else begin
        invert_table4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_0_V_TVALID = 1'b1;
    end else begin
        res_V_data_0_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_1_V_TVALID = 1'b1;
    end else begin
        res_V_data_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_2_V_TVALID = 1'b1;
    end else begin
        res_V_data_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_3_V_TVALID = 1'b1;
    end else begin
        res_V_data_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_4_V_TVALID = 1'b1;
    end else begin
        res_V_data_4_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln786_1_fu_544_p2 = (xor_ln786_1_fu_538_p2 & tmp_13_fu_522_p3);

assign and_ln786_2_fu_599_p2 = (xor_ln786_2_fu_593_p2 & tmp_15_fu_577_p3);

assign and_ln786_3_fu_654_p2 = (xor_ln786_3_fu_648_p2 & tmp_17_fu_632_p3);

assign and_ln786_4_fu_709_p2 = (xor_ln786_4_fu_703_p2 & tmp_19_fu_687_p3);

assign and_ln786_fu_489_p2 = (xor_ln786_fu_483_p2 & tmp_11_fu_467_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((io_acc_block_signal_op6 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_start == 1'b1) & ((io_acc_block_signal_op6 == 1'b0) | (ap_start == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_start == 1'b1) & ((io_acc_block_signal_op6 == 1'b0) | (ap_start == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op6 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_table3_address0 = zext_ln225_fu_767_p1;

assign exp_table3_address1 = zext_ln225_1_fu_806_p1;

assign exp_table3_address2 = zext_ln225_2_fu_845_p1;

assign exp_table3_address3 = zext_ln225_3_fu_884_p1;

assign exp_table3_address4 = zext_ln225_4_fu_923_p1;

assign icmp_ln1496_1_fu_416_p0 = data_V_data_2_V_dout;

assign icmp_ln1496_1_fu_416_p1 = data_V_data_3_V_dout;

assign icmp_ln1496_1_fu_416_p2 = (($signed(icmp_ln1496_1_fu_416_p0) < $signed(icmp_ln1496_1_fu_416_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_430_p2 = (($signed(select_ln65_fu_408_p3) < $signed(select_ln65_1_fu_422_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_444_p2 = (($signed(select_ln65_2_reg_1295) < $signed(data_array_4_V_reg_1288)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_402_p0 = data_V_data_0_V_dout;

assign icmp_ln1496_fu_402_p1 = data_V_data_1_V_dout;

assign icmp_ln1496_fu_402_p2 = (($signed(icmp_ln1496_fu_402_p0) < $signed(icmp_ln1496_fu_402_p1)) ? 1'b1 : 1'b0);

assign invert_table4_address0 = zext_ln235_fu_1179_p1;

assign io_acc_block_signal_op6 = (data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign lhs_V_1_fu_1081_p1 = p_Val2_16_reg_1351;

assign lhs_V_fu_987_p1 = p_Val2_12_fu_949_p3;

assign mul_ln1118_1_fu_275_p0 = sext_ln241_fu_1184_p1;

assign mul_ln1118_1_fu_275_p1 = mul_ln1118_1_fu_275_p10;

assign mul_ln1118_1_fu_275_p10 = exp_res_1_V_reg_1331_pp0_iter3_reg;

assign mul_ln1118_1_fu_275_p2 = ($signed(mul_ln1118_1_fu_275_p0) * $signed({{1'b0}, {mul_ln1118_1_fu_275_p1}}));

assign mul_ln1118_2_fu_274_p0 = sext_ln241_fu_1184_p1;

assign mul_ln1118_2_fu_274_p1 = mul_ln1118_2_fu_274_p10;

assign mul_ln1118_2_fu_274_p10 = exp_res_2_V_reg_1336_pp0_iter3_reg;

assign mul_ln1118_2_fu_274_p2 = ($signed(mul_ln1118_2_fu_274_p0) * $signed({{1'b0}, {mul_ln1118_2_fu_274_p1}}));

assign mul_ln1118_3_fu_273_p0 = sext_ln241_fu_1184_p1;

assign mul_ln1118_3_fu_273_p1 = mul_ln1118_3_fu_273_p10;

assign mul_ln1118_3_fu_273_p10 = exp_res_3_V_reg_1341_pp0_iter3_reg;

assign mul_ln1118_3_fu_273_p2 = ($signed(mul_ln1118_3_fu_273_p0) * $signed({{1'b0}, {mul_ln1118_3_fu_273_p1}}));

assign mul_ln1118_4_fu_271_p0 = sext_ln241_fu_1184_p1;

assign mul_ln1118_4_fu_271_p1 = mul_ln1118_4_fu_271_p10;

assign mul_ln1118_4_fu_271_p10 = exp_res_4_V_reg_1357;

assign mul_ln1118_4_fu_271_p2 = ($signed(mul_ln1118_4_fu_271_p0) * $signed({{1'b0}, {mul_ln1118_4_fu_271_p1}}));

assign mul_ln1118_fu_272_p0 = sext_ln241_fu_1184_p1;

assign mul_ln1118_fu_272_p1 = mul_ln1118_fu_272_p10;

assign mul_ln1118_fu_272_p10 = exp_res_0_V_reg_1326_pp0_iter3_reg;

assign mul_ln1118_fu_272_p2 = ($signed(mul_ln1118_fu_272_p0) * $signed({{1'b0}, {mul_ln1118_fu_272_p1}}));

assign or_ln340_1_fu_562_p2 = (xor_ln340_1_fu_556_p2 | tmp_14_fu_530_p3);

assign or_ln340_2_fu_617_p2 = (xor_ln340_2_fu_611_p2 | tmp_16_fu_585_p3);

assign or_ln340_3_fu_672_p2 = (xor_ln340_3_fu_666_p2 | tmp_18_fu_640_p3);

assign or_ln340_4_fu_727_p2 = (xor_ln340_4_fu_721_p2 | tmp_20_fu_695_p3);

assign or_ln340_5_fu_1047_p2 = (xor_ln340_11_fu_1041_p2 | p_Result_16_fu_1015_p3);

assign or_ln340_6_fu_1139_p2 = (xor_ln340_13_fu_1133_p2 | p_Result_18_fu_1107_p3);

assign or_ln340_fu_507_p2 = (xor_ln340_fu_501_p2 | tmp_12_fu_475_p3);

assign p_Result_14_fu_971_p3 = p_Val2_11_fu_965_p2[32'd17];

assign p_Result_15_fu_1001_p3 = ret_V_fu_995_p2[32'd18];

assign p_Result_16_fu_1015_p3 = p_Val2_15_fu_1009_p2[32'd17];

assign p_Result_17_fu_1094_p3 = ret_V_1_fu_1088_p2[32'd18];

assign p_Result_18_fu_1107_p3 = p_Val2_19_fu_1102_p2[32'd17];

assign p_Result_s_fu_941_p3 = p_Val2_8_fu_935_p2[32'd17];

assign p_Val2_10_fu_961_p1 = exp_table3_q3;

assign p_Val2_11_fu_965_p2 = (p_Val2_9_fu_957_p1 + p_Val2_10_fu_961_p1);

assign p_Val2_12_fu_949_p3 = ((p_Result_s_fu_941_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_8_fu_935_p2);

assign p_Val2_13_fu_979_p3 = ((p_Result_14_fu_971_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_11_fu_965_p2);

assign p_Val2_15_fu_1009_p2 = ($signed(p_Val2_12_fu_949_p3) + $signed(p_Val2_13_fu_979_p3));

assign p_Val2_16_fu_1069_p3 = ((or_ln340_5_fu_1047_p2[0:0] === 1'b1) ? select_ln340_12_fu_1053_p3 : select_ln388_5_fu_1061_p3);

assign p_Val2_17_fu_1077_p1 = exp_table3_q4;

assign p_Val2_19_fu_1102_p2 = ($signed(p_Val2_17_fu_1077_p1) + $signed(p_Val2_16_reg_1351));

assign p_Val2_6_fu_927_p1 = exp_table3_q0;

assign p_Val2_7_fu_931_p1 = exp_table3_q1;

assign p_Val2_8_fu_935_p2 = (p_Val2_6_fu_927_p1 + p_Val2_7_fu_931_p1);

assign p_Val2_9_fu_957_p1 = exp_table3_q2;

assign res_V_data_0_V_TDATA = {{mul_ln1118_fu_272_p2[25:10]}};

assign res_V_data_1_V_TDATA = {{mul_ln1118_1_fu_275_p2[25:10]}};

assign res_V_data_2_V_TDATA = {{mul_ln1118_2_fu_274_p2[25:10]}};

assign res_V_data_3_V_TDATA = {{mul_ln1118_3_fu_273_p2[25:10]}};

assign res_V_data_4_V_TDATA = {{mul_ln1118_4_fu_271_p2[25:10]}};

assign ret_V_1_fu_1088_p2 = ($signed(lhs_V_1_fu_1081_p1) + $signed(rhs_V_1_fu_1084_p1));

assign ret_V_fu_995_p2 = ($signed(rhs_V_fu_991_p1) + $signed(lhs_V_fu_987_p1));

assign rhs_V_1_fu_1084_p1 = exp_table3_q4;

assign rhs_V_fu_991_p1 = p_Val2_13_fu_979_p3;

assign select_ln340_12_fu_1053_p3 = ((xor_ln340_10_fu_1035_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_15_fu_1009_p2);

assign select_ln340_14_fu_1155_p3 = ((xor_ln340_12_fu_1127_p2[0:0] === 1'b1) ? 10'd511 : tmp_10_fu_1145_p4);

assign select_ln340_2_fu_782_p3 = ((xor_ln340_6_fu_550_p2[0:0] === 1'b1) ? 10'd511 : tmp_8_fu_772_p4);

assign select_ln340_4_fu_821_p3 = ((xor_ln340_7_fu_605_p2[0:0] === 1'b1) ? 10'd511 : tmp_s_fu_811_p4);

assign select_ln340_6_fu_860_p3 = ((xor_ln340_8_fu_660_p2[0:0] === 1'b1) ? 10'd511 : tmp_7_fu_850_p4);

assign select_ln340_8_fu_899_p3 = ((xor_ln340_9_fu_715_p2[0:0] === 1'b1) ? 10'd511 : tmp_9_fu_889_p4);

assign select_ln340_fu_743_p3 = ((xor_ln340_5_fu_495_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_733_p4);

assign select_ln388_1_fu_790_p3 = ((and_ln786_1_fu_544_p2[0:0] === 1'b1) ? 10'd512 : tmp_8_fu_772_p4);

assign select_ln388_2_fu_829_p3 = ((and_ln786_2_fu_599_p2[0:0] === 1'b1) ? 10'd512 : tmp_s_fu_811_p4);

assign select_ln388_3_fu_868_p3 = ((and_ln786_3_fu_654_p2[0:0] === 1'b1) ? 10'd512 : tmp_7_fu_850_p4);

assign select_ln388_4_fu_907_p3 = ((and_ln786_4_fu_709_p2[0:0] === 1'b1) ? 10'd512 : tmp_9_fu_889_p4);

assign select_ln388_5_fu_1061_p3 = ((underflow_fu_1029_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_15_fu_1009_p2);

assign select_ln388_6_fu_1163_p3 = ((underflow_1_fu_1121_p2[0:0] === 1'b1) ? 10'd512 : tmp_10_fu_1145_p4);

assign select_ln388_fu_751_p3 = ((and_ln786_fu_489_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_733_p4);

assign select_ln65_1_fu_422_p1 = data_V_data_3_V_dout;

assign select_ln65_1_fu_422_p2 = data_V_data_2_V_dout;

assign select_ln65_1_fu_422_p3 = ((icmp_ln1496_1_fu_416_p2[0:0] === 1'b1) ? select_ln65_1_fu_422_p1 : select_ln65_1_fu_422_p2);

assign select_ln65_2_fu_436_p3 = ((icmp_ln1496_2_fu_430_p2[0:0] === 1'b1) ? select_ln65_1_fu_422_p3 : select_ln65_fu_408_p3);

assign select_ln65_fu_408_p1 = data_V_data_1_V_dout;

assign select_ln65_fu_408_p2 = data_V_data_0_V_dout;

assign select_ln65_fu_408_p3 = ((icmp_ln1496_fu_402_p2[0:0] === 1'b1) ? select_ln65_fu_408_p1 : select_ln65_fu_408_p2);

assign sext_ln241_fu_1184_p1 = $signed(invert_table4_q0);

assign sext_ln703_1_fu_457_p1 = $signed(x_max_V_fu_448_p3);

assign sext_ln703_2_fu_513_p1 = data_array_1_V_reg_1273;

assign sext_ln703_3_fu_568_p1 = data_array_2_V_reg_1278;

assign sext_ln703_4_fu_623_p1 = data_array_3_V_reg_1283;

assign sext_ln703_5_fu_678_p1 = data_array_4_V_reg_1288;

assign sext_ln703_fu_454_p1 = data_array_0_V_reg_1268;

assign sub_ln1193_1_fu_516_p2 = ($signed(sext_ln703_2_fu_513_p1) - $signed(sext_ln703_1_fu_457_p1));

assign sub_ln1193_2_fu_571_p2 = ($signed(sext_ln703_3_fu_568_p1) - $signed(sext_ln703_1_fu_457_p1));

assign sub_ln1193_3_fu_626_p2 = ($signed(sext_ln703_4_fu_623_p1) - $signed(sext_ln703_1_fu_457_p1));

assign sub_ln1193_4_fu_681_p2 = ($signed(sext_ln703_5_fu_678_p1) - $signed(sext_ln703_1_fu_457_p1));

assign sub_ln1193_fu_461_p2 = ($signed(sext_ln703_fu_454_p1) - $signed(sext_ln703_1_fu_457_p1));

assign tmp_10_fu_1145_p4 = {{p_Val2_19_fu_1102_p2[17:8]}};

assign tmp_11_fu_467_p3 = sub_ln1193_fu_461_p2[32'd22];

assign tmp_12_fu_475_p3 = sub_ln1193_fu_461_p2[32'd21];

assign tmp_13_fu_522_p3 = sub_ln1193_1_fu_516_p2[32'd22];

assign tmp_14_fu_530_p3 = sub_ln1193_1_fu_516_p2[32'd21];

assign tmp_15_fu_577_p3 = sub_ln1193_2_fu_571_p2[32'd22];

assign tmp_16_fu_585_p3 = sub_ln1193_2_fu_571_p2[32'd21];

assign tmp_17_fu_632_p3 = sub_ln1193_3_fu_626_p2[32'd22];

assign tmp_18_fu_640_p3 = sub_ln1193_3_fu_626_p2[32'd21];

assign tmp_19_fu_687_p3 = sub_ln1193_4_fu_681_p2[32'd22];

assign tmp_20_fu_695_p3 = sub_ln1193_4_fu_681_p2[32'd21];

assign tmp_7_fu_850_p4 = {{sub_ln1193_3_fu_626_p2[21:12]}};

assign tmp_8_fu_772_p4 = {{sub_ln1193_1_fu_516_p2[21:12]}};

assign tmp_9_fu_889_p4 = {{sub_ln1193_4_fu_681_p2[21:12]}};

assign tmp_fu_733_p4 = {{sub_ln1193_fu_461_p2[21:12]}};

assign tmp_s_fu_811_p4 = {{sub_ln1193_2_fu_571_p2[21:12]}};

assign underflow_1_fu_1121_p2 = (xor_ln786_6_fu_1115_p2 & p_Result_17_fu_1094_p3);

assign underflow_fu_1029_p2 = (xor_ln786_5_fu_1023_p2 & p_Result_15_fu_1001_p3);

assign x_max_V_fu_448_p3 = ((icmp_ln1496_3_fu_444_p2[0:0] === 1'b1) ? data_array_4_V_reg_1288 : select_ln65_2_reg_1295);

assign xor_ln340_10_fu_1035_p2 = (p_Result_16_fu_1015_p3 ^ p_Result_15_fu_1001_p3);

assign xor_ln340_11_fu_1041_p2 = (p_Result_15_fu_1001_p3 ^ 1'd1);

assign xor_ln340_12_fu_1127_p2 = (p_Result_18_fu_1107_p3 ^ p_Result_17_fu_1094_p3);

assign xor_ln340_13_fu_1133_p2 = (p_Result_17_fu_1094_p3 ^ 1'd1);

assign xor_ln340_1_fu_556_p2 = (tmp_13_fu_522_p3 ^ 1'd1);

assign xor_ln340_2_fu_611_p2 = (tmp_15_fu_577_p3 ^ 1'd1);

assign xor_ln340_3_fu_666_p2 = (tmp_17_fu_632_p3 ^ 1'd1);

assign xor_ln340_4_fu_721_p2 = (tmp_19_fu_687_p3 ^ 1'd1);

assign xor_ln340_5_fu_495_p2 = (tmp_12_fu_475_p3 ^ tmp_11_fu_467_p3);

assign xor_ln340_6_fu_550_p2 = (tmp_14_fu_530_p3 ^ tmp_13_fu_522_p3);

assign xor_ln340_7_fu_605_p2 = (tmp_16_fu_585_p3 ^ tmp_15_fu_577_p3);

assign xor_ln340_8_fu_660_p2 = (tmp_18_fu_640_p3 ^ tmp_17_fu_632_p3);

assign xor_ln340_9_fu_715_p2 = (tmp_20_fu_695_p3 ^ tmp_19_fu_687_p3);

assign xor_ln340_fu_501_p2 = (tmp_11_fu_467_p3 ^ 1'd1);

assign xor_ln786_1_fu_538_p2 = (tmp_14_fu_530_p3 ^ 1'd1);

assign xor_ln786_2_fu_593_p2 = (tmp_16_fu_585_p3 ^ 1'd1);

assign xor_ln786_3_fu_648_p2 = (tmp_18_fu_640_p3 ^ 1'd1);

assign xor_ln786_4_fu_703_p2 = (tmp_20_fu_695_p3 ^ 1'd1);

assign xor_ln786_5_fu_1023_p2 = (p_Result_16_fu_1015_p3 ^ 1'd1);

assign xor_ln786_6_fu_1115_p2 = (p_Result_18_fu_1107_p3 ^ 1'd1);

assign xor_ln786_fu_483_p2 = (tmp_12_fu_475_p3 ^ 1'd1);

assign y_V_1_fu_798_p3 = ((or_ln340_1_fu_562_p2[0:0] === 1'b1) ? select_ln340_2_fu_782_p3 : select_ln388_1_fu_790_p3);

assign y_V_2_fu_837_p3 = ((or_ln340_2_fu_617_p2[0:0] === 1'b1) ? select_ln340_4_fu_821_p3 : select_ln388_2_fu_829_p3);

assign y_V_3_fu_876_p3 = ((or_ln340_3_fu_672_p2[0:0] === 1'b1) ? select_ln340_6_fu_860_p3 : select_ln388_3_fu_868_p3);

assign y_V_4_fu_915_p3 = ((or_ln340_4_fu_727_p2[0:0] === 1'b1) ? select_ln340_8_fu_899_p3 : select_ln388_4_fu_907_p3);

assign y_V_5_fu_1171_p3 = ((or_ln340_6_fu_1139_p2[0:0] === 1'b1) ? select_ln340_14_fu_1155_p3 : select_ln388_6_fu_1163_p3);

assign y_V_fu_759_p3 = ((or_ln340_fu_507_p2[0:0] === 1'b1) ? select_ln340_fu_743_p3 : select_ln388_fu_751_p3);

assign zext_ln225_1_fu_806_p1 = y_V_1_fu_798_p3;

assign zext_ln225_2_fu_845_p1 = y_V_2_fu_837_p3;

assign zext_ln225_3_fu_884_p1 = y_V_3_fu_876_p3;

assign zext_ln225_4_fu_923_p1 = y_V_4_reg_1321;

assign zext_ln225_fu_767_p1 = y_V_fu_759_p3;

assign zext_ln235_fu_1179_p1 = y_V_5_fu_1171_p3;

endmodule //softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_Softmax_config18_s
