-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_Softmax_config18_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (21 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (21 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (21 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (21 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    data_V_data_4_V_dout : IN STD_LOGIC_VECTOR (21 downto 0);
    data_V_data_4_V_empty_n : IN STD_LOGIC;
    data_V_data_4_V_read : OUT STD_LOGIC;
    res_V_data_0_V_TREADY : IN STD_LOGIC;
    res_V_data_0_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_TVALID : OUT STD_LOGIC;
    res_V_data_1_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_TVALID : OUT STD_LOGIC;
    res_V_data_1_V_TREADY : IN STD_LOGIC;
    res_V_data_2_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_TVALID : OUT STD_LOGIC;
    res_V_data_2_V_TREADY : IN STD_LOGIC;
    res_V_data_3_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_TVALID : OUT STD_LOGIC;
    res_V_data_3_V_TREADY : IN STD_LOGIC;
    res_V_data_4_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_4_V_TVALID : OUT STD_LOGIC;
    res_V_data_4_V_TREADY : IN STD_LOGIC;
    data_V_data_0_V_blk_n : OUT STD_LOGIC;
    data_V_data_1_V_blk_n : OUT STD_LOGIC;
    data_V_data_2_V_blk_n : OUT STD_LOGIC;
    data_V_data_3_V_blk_n : OUT STD_LOGIC;
    data_V_data_4_V_blk_n : OUT STD_LOGIC;
    res_V_data_0_V_TDATA_blk_n : OUT STD_LOGIC;
    res_V_data_1_V_TDATA_blk_n : OUT STD_LOGIC;
    res_V_data_2_V_TDATA_blk_n : OUT STD_LOGIC;
    res_V_data_3_V_TDATA_blk_n : OUT STD_LOGIC;
    res_V_data_4_V_TDATA_blk_n : OUT STD_LOGIC );
end;


architecture behav of softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_Softmax_config18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal io_acc_block_signal_op6 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce0 : STD_LOGIC;
    signal exp_table3_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce1 : STD_LOGIC;
    signal exp_table3_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce2 : STD_LOGIC;
    signal exp_table3_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce3 : STD_LOGIC;
    signal exp_table3_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce4 : STD_LOGIC;
    signal exp_table3_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table4_ce0 : STD_LOGIC;
    signal invert_table4_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal data_array_0_V_reg_1268 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_array_1_V_reg_1273 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_array_2_V_reg_1278 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_array_3_V_reg_1283 : STD_LOGIC_VECTOR (21 downto 0);
    signal data_array_4_V_reg_1288 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln65_2_fu_436_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln65_2_reg_1295 : STD_LOGIC_VECTOR (21 downto 0);
    signal y_V_4_fu_915_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1321 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_1326 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1326_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1331 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1331_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1336 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1336_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1341 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1341_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_16_fu_1069_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_16_reg_1351 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_1357 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln225_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_1_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_2_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_3_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_4_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln235_fu_1179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln1118_4_fu_271_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln241_fu_1184_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_fu_271_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_fu_272_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_fu_272_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_3_fu_273_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_3_fu_273_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_2_fu_274_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_2_fu_274_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_1_fu_275_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_1_fu_275_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1496_fu_402_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_fu_402_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_408_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln65_fu_408_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_1_fu_416_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_1_fu_416_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_1_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_1_fu_422_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln65_1_fu_422_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln65_fu_408_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln65_1_fu_422_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_2_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_3_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_448_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln703_fu_454_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln703_1_fu_457_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1193_fu_461_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_12_fu_475_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_2_fu_513_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1193_1_fu_516_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_14_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_522_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_3_fu_568_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1193_2_fu_571_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_16_fu_585_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_577_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_4_fu_623_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1193_3_fu_626_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_18_fu_640_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_632_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_5_fu_678_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1193_4_fu_681_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_20_fu_695_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_687_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_733_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_743_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_751_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_fu_759_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_6_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_772_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_1_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_782_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_790_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_798_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_7_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_811_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_2_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_821_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_829_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_837_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_8_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_850_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_3_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_860_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_868_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_876_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_9_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_889_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_4_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_899_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_4_fu_907_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_6_fu_927_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_fu_931_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_935_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_941_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_957_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_10_fu_961_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_11_fu_965_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_14_fu_971_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_fu_949_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_13_fu_979_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_fu_991_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_fu_987_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_995_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_15_fu_1009_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_16_fu_1015_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_1001_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_5_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_11_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_10_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_1053_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_5_fu_1061_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_1_fu_1081_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_1_fu_1084_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_1088_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_17_fu_1077_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_19_fu_1102_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_18_fu_1107_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_1094_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_6_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_13_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_12_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1145_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal underflow_1_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_14_fu_1155_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_6_fu_1163_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_fu_1171_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_272_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_1_fu_275_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_2_fu_274_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_3_fu_273_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_fu_271_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1118_1_fu_275_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_2_fu_274_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_3_fu_273_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_fu_271_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_fu_272_p10 : STD_LOGIC_VECTOR (25 downto 0);

    component softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_Softmax_config18_s_exp_table3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_Softmax_config18_s_invert_tbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table3_U : component softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_Softmax_config18_s_exp_table3
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table3_address0,
        ce0 => exp_table3_ce0,
        q0 => exp_table3_q0,
        address1 => exp_table3_address1,
        ce1 => exp_table3_ce1,
        q1 => exp_table3_q1,
        address2 => exp_table3_address2,
        ce2 => exp_table3_ce2,
        q2 => exp_table3_q2,
        address3 => exp_table3_address3,
        ce3 => exp_table3_ce3,
        q3 => exp_table3_q3,
        address4 => exp_table3_address4,
        ce4 => exp_table3_ce4,
        q4 => exp_table3_q4);

    invert_table4_U : component softmax_stable_array_array_ap_fixed_16_6_5_3_0_5u_Softmax_config18_s_invert_tbkb
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table4_address0,
        ce0 => invert_table4_ce0,
        q0 => invert_table4_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_array_0_V_reg_1268 <= data_V_data_0_V_dout;
                data_array_1_V_reg_1273 <= data_V_data_1_V_dout;
                data_array_2_V_reg_1278 <= data_V_data_2_V_dout;
                data_array_3_V_reg_1283 <= data_V_data_3_V_dout;
                data_array_4_V_reg_1288 <= data_V_data_4_V_dout;
                select_ln65_2_reg_1295 <= select_ln65_2_fu_436_p3;
                y_V_4_reg_1321 <= y_V_4_fu_915_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                exp_res_0_V_reg_1326 <= exp_table3_q0;
                exp_res_1_V_reg_1331 <= exp_table3_q1;
                exp_res_2_V_reg_1336 <= exp_table3_q2;
                exp_res_3_V_reg_1341 <= exp_table3_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_res_0_V_reg_1326_pp0_iter3_reg <= exp_res_0_V_reg_1326;
                exp_res_1_V_reg_1331_pp0_iter3_reg <= exp_res_1_V_reg_1331;
                exp_res_2_V_reg_1336_pp0_iter3_reg <= exp_res_2_V_reg_1336;
                exp_res_3_V_reg_1341_pp0_iter3_reg <= exp_res_3_V_reg_1341;
                p_Val2_16_reg_1351 <= p_Val2_16_fu_1069_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                exp_res_4_V_reg_1357 <= exp_table3_q4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln786_1_fu_544_p2 <= (xor_ln786_1_fu_538_p2 and tmp_13_fu_522_p3);
    and_ln786_2_fu_599_p2 <= (xor_ln786_2_fu_593_p2 and tmp_15_fu_577_p3);
    and_ln786_3_fu_654_p2 <= (xor_ln786_3_fu_648_p2 and tmp_17_fu_632_p3);
    and_ln786_4_fu_709_p2 <= (xor_ln786_4_fu_703_p2 and tmp_19_fu_687_p3);
    and_ln786_fu_489_p2 <= (xor_ln786_fu_483_p2 and tmp_11_fu_467_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, io_acc_block_signal_op6)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((io_acc_block_signal_op6 = ap_const_logic_0) or (ap_start = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter4, io_acc_block_signal_op6, res_V_data_0_V_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((res_V_data_0_V_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((io_acc_block_signal_op6 = ap_const_logic_0) or (ap_start = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter4, io_acc_block_signal_op6, res_V_data_0_V_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= (((res_V_data_0_V_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((io_acc_block_signal_op6 = ap_const_logic_0) or (ap_start = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, io_acc_block_signal_op6)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((io_acc_block_signal_op6 = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_0_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_1_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_2_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_3_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_4_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_data_4_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_4_V_blk_n <= data_V_data_4_V_empty_n;
        else 
            data_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_4_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_4_V_read <= ap_const_logic_1;
        else 
            data_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;

    exp_table3_address0 <= zext_ln225_fu_767_p1(10 - 1 downto 0);
    exp_table3_address1 <= zext_ln225_1_fu_806_p1(10 - 1 downto 0);
    exp_table3_address2 <= zext_ln225_2_fu_845_p1(10 - 1 downto 0);
    exp_table3_address3 <= zext_ln225_3_fu_884_p1(10 - 1 downto 0);
    exp_table3_address4 <= zext_ln225_4_fu_923_p1(10 - 1 downto 0);

    exp_table3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table3_ce0 <= ap_const_logic_1;
        else 
            exp_table3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table3_ce1 <= ap_const_logic_1;
        else 
            exp_table3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table3_ce2 <= ap_const_logic_1;
        else 
            exp_table3_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table3_ce3 <= ap_const_logic_1;
        else 
            exp_table3_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce4 <= ap_const_logic_1;
        else 
            exp_table3_ce4 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_1_fu_416_p0 <= data_V_data_2_V_dout;
    icmp_ln1496_1_fu_416_p1 <= data_V_data_3_V_dout;
    icmp_ln1496_1_fu_416_p2 <= "1" when (signed(icmp_ln1496_1_fu_416_p0) < signed(icmp_ln1496_1_fu_416_p1)) else "0";
    icmp_ln1496_2_fu_430_p2 <= "1" when (signed(select_ln65_fu_408_p3) < signed(select_ln65_1_fu_422_p3)) else "0";
    icmp_ln1496_3_fu_444_p2 <= "1" when (signed(select_ln65_2_reg_1295) < signed(data_array_4_V_reg_1288)) else "0";
    icmp_ln1496_fu_402_p0 <= data_V_data_0_V_dout;
    icmp_ln1496_fu_402_p1 <= data_V_data_1_V_dout;
    icmp_ln1496_fu_402_p2 <= "1" when (signed(icmp_ln1496_fu_402_p0) < signed(icmp_ln1496_fu_402_p1)) else "0";
    invert_table4_address0 <= zext_ln235_fu_1179_p1(10 - 1 downto 0);

    invert_table4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            invert_table4_ce0 <= ap_const_logic_1;
        else 
            invert_table4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op6 <= (data_V_data_4_V_empty_n and data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);
        lhs_V_1_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_16_reg_1351),19));

        lhs_V_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_12_fu_949_p3),19));

    mul_ln1118_1_fu_275_p0 <= sext_ln241_fu_1184_p1(18 - 1 downto 0);
    mul_ln1118_1_fu_275_p1 <= mul_ln1118_1_fu_275_p10(17 - 1 downto 0);
    mul_ln1118_1_fu_275_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_1331_pp0_iter3_reg),26));
    mul_ln1118_1_fu_275_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_1_fu_275_p0) * signed('0' &mul_ln1118_1_fu_275_p1))), 26));
    mul_ln1118_2_fu_274_p0 <= sext_ln241_fu_1184_p1(18 - 1 downto 0);
    mul_ln1118_2_fu_274_p1 <= mul_ln1118_2_fu_274_p10(17 - 1 downto 0);
    mul_ln1118_2_fu_274_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_1336_pp0_iter3_reg),26));
    mul_ln1118_2_fu_274_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_2_fu_274_p0) * signed('0' &mul_ln1118_2_fu_274_p1))), 26));
    mul_ln1118_3_fu_273_p0 <= sext_ln241_fu_1184_p1(18 - 1 downto 0);
    mul_ln1118_3_fu_273_p1 <= mul_ln1118_3_fu_273_p10(17 - 1 downto 0);
    mul_ln1118_3_fu_273_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_1341_pp0_iter3_reg),26));
    mul_ln1118_3_fu_273_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_3_fu_273_p0) * signed('0' &mul_ln1118_3_fu_273_p1))), 26));
    mul_ln1118_4_fu_271_p0 <= sext_ln241_fu_1184_p1(18 - 1 downto 0);
    mul_ln1118_4_fu_271_p1 <= mul_ln1118_4_fu_271_p10(17 - 1 downto 0);
    mul_ln1118_4_fu_271_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_1357),26));
    mul_ln1118_4_fu_271_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_4_fu_271_p0) * signed('0' &mul_ln1118_4_fu_271_p1))), 26));
    mul_ln1118_fu_272_p0 <= sext_ln241_fu_1184_p1(18 - 1 downto 0);
    mul_ln1118_fu_272_p1 <= mul_ln1118_fu_272_p10(17 - 1 downto 0);
    mul_ln1118_fu_272_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_1326_pp0_iter3_reg),26));
    mul_ln1118_fu_272_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_272_p0) * signed('0' &mul_ln1118_fu_272_p1))), 26));
    or_ln340_1_fu_562_p2 <= (xor_ln340_1_fu_556_p2 or tmp_14_fu_530_p3);
    or_ln340_2_fu_617_p2 <= (xor_ln340_2_fu_611_p2 or tmp_16_fu_585_p3);
    or_ln340_3_fu_672_p2 <= (xor_ln340_3_fu_666_p2 or tmp_18_fu_640_p3);
    or_ln340_4_fu_727_p2 <= (xor_ln340_4_fu_721_p2 or tmp_20_fu_695_p3);
    or_ln340_5_fu_1047_p2 <= (xor_ln340_11_fu_1041_p2 or p_Result_16_fu_1015_p3);
    or_ln340_6_fu_1139_p2 <= (xor_ln340_13_fu_1133_p2 or p_Result_18_fu_1107_p3);
    or_ln340_fu_507_p2 <= (xor_ln340_fu_501_p2 or tmp_12_fu_475_p3);
    p_Result_14_fu_971_p3 <= p_Val2_11_fu_965_p2(17 downto 17);
    p_Result_15_fu_1001_p3 <= ret_V_fu_995_p2(18 downto 18);
    p_Result_16_fu_1015_p3 <= p_Val2_15_fu_1009_p2(17 downto 17);
    p_Result_17_fu_1094_p3 <= ret_V_1_fu_1088_p2(18 downto 18);
    p_Result_18_fu_1107_p3 <= p_Val2_19_fu_1102_p2(17 downto 17);
    p_Result_s_fu_941_p3 <= p_Val2_8_fu_935_p2(17 downto 17);
    p_Val2_10_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table3_q3),18));
    p_Val2_11_fu_965_p2 <= std_logic_vector(unsigned(p_Val2_9_fu_957_p1) + unsigned(p_Val2_10_fu_961_p1));
    p_Val2_12_fu_949_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_s_fu_941_p3(0) = '1') else 
        p_Val2_8_fu_935_p2;
    p_Val2_13_fu_979_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_14_fu_971_p3(0) = '1') else 
        p_Val2_11_fu_965_p2;
    p_Val2_15_fu_1009_p2 <= std_logic_vector(signed(p_Val2_12_fu_949_p3) + signed(p_Val2_13_fu_979_p3));
    p_Val2_16_fu_1069_p3 <= 
        select_ln340_12_fu_1053_p3 when (or_ln340_5_fu_1047_p2(0) = '1') else 
        select_ln388_5_fu_1061_p3;
    p_Val2_17_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table3_q4),18));
    p_Val2_19_fu_1102_p2 <= std_logic_vector(unsigned(p_Val2_17_fu_1077_p1) + unsigned(p_Val2_16_reg_1351));
    p_Val2_6_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table3_q0),18));
    p_Val2_7_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table3_q1),18));
    p_Val2_8_fu_935_p2 <= std_logic_vector(unsigned(p_Val2_6_fu_927_p1) + unsigned(p_Val2_7_fu_931_p1));
    p_Val2_9_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table3_q2),18));
    res_V_data_0_V_TDATA <= mul_ln1118_fu_272_p2(25 downto 10);

    res_V_data_0_V_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, res_V_data_0_V_TREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_0_V_TDATA_blk_n <= res_V_data_0_V_TREADY;
        else 
            res_V_data_0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_data_0_V_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_0_V_TVALID <= ap_const_logic_1;
        else 
            res_V_data_0_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    res_V_data_1_V_TDATA <= mul_ln1118_1_fu_275_p2(25 downto 10);

    res_V_data_1_V_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, res_V_data_1_V_TREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_1_V_TDATA_blk_n <= res_V_data_1_V_TREADY;
        else 
            res_V_data_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_data_1_V_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_1_V_TVALID <= ap_const_logic_1;
        else 
            res_V_data_1_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    res_V_data_2_V_TDATA <= mul_ln1118_2_fu_274_p2(25 downto 10);

    res_V_data_2_V_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, res_V_data_2_V_TREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_2_V_TDATA_blk_n <= res_V_data_2_V_TREADY;
        else 
            res_V_data_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_data_2_V_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_2_V_TVALID <= ap_const_logic_1;
        else 
            res_V_data_2_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    res_V_data_3_V_TDATA <= mul_ln1118_3_fu_273_p2(25 downto 10);

    res_V_data_3_V_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, res_V_data_3_V_TREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_3_V_TDATA_blk_n <= res_V_data_3_V_TREADY;
        else 
            res_V_data_3_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_data_3_V_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_3_V_TVALID <= ap_const_logic_1;
        else 
            res_V_data_3_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    res_V_data_4_V_TDATA <= mul_ln1118_4_fu_271_p2(25 downto 10);

    res_V_data_4_V_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, res_V_data_4_V_TREADY)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_4_V_TDATA_blk_n <= res_V_data_4_V_TREADY;
        else 
            res_V_data_4_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_data_4_V_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_V_data_4_V_TVALID <= ap_const_logic_1;
        else 
            res_V_data_4_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_1088_p2 <= std_logic_vector(signed(lhs_V_1_fu_1081_p1) + signed(rhs_V_1_fu_1084_p1));
    ret_V_fu_995_p2 <= std_logic_vector(signed(rhs_V_fu_991_p1) + signed(lhs_V_fu_987_p1));
    rhs_V_1_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table3_q4),19));
        rhs_V_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_fu_979_p3),19));

    select_ln340_12_fu_1053_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_10_fu_1035_p2(0) = '1') else 
        p_Val2_15_fu_1009_p2;
    select_ln340_14_fu_1155_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_12_fu_1127_p2(0) = '1') else 
        tmp_10_fu_1145_p4;
    select_ln340_2_fu_782_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_6_fu_550_p2(0) = '1') else 
        tmp_8_fu_772_p4;
    select_ln340_4_fu_821_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_7_fu_605_p2(0) = '1') else 
        tmp_s_fu_811_p4;
    select_ln340_6_fu_860_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_8_fu_660_p2(0) = '1') else 
        tmp_7_fu_850_p4;
    select_ln340_8_fu_899_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_9_fu_715_p2(0) = '1') else 
        tmp_9_fu_889_p4;
    select_ln340_fu_743_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_5_fu_495_p2(0) = '1') else 
        tmp_fu_733_p4;
    select_ln388_1_fu_790_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_544_p2(0) = '1') else 
        tmp_8_fu_772_p4;
    select_ln388_2_fu_829_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_599_p2(0) = '1') else 
        tmp_s_fu_811_p4;
    select_ln388_3_fu_868_p3 <= 
        ap_const_lv10_200 when (and_ln786_3_fu_654_p2(0) = '1') else 
        tmp_7_fu_850_p4;
    select_ln388_4_fu_907_p3 <= 
        ap_const_lv10_200 when (and_ln786_4_fu_709_p2(0) = '1') else 
        tmp_9_fu_889_p4;
    select_ln388_5_fu_1061_p3 <= 
        ap_const_lv18_20000 when (underflow_fu_1029_p2(0) = '1') else 
        p_Val2_15_fu_1009_p2;
    select_ln388_6_fu_1163_p3 <= 
        ap_const_lv10_200 when (underflow_1_fu_1121_p2(0) = '1') else 
        tmp_10_fu_1145_p4;
    select_ln388_fu_751_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_489_p2(0) = '1') else 
        tmp_fu_733_p4;
    select_ln65_1_fu_422_p1 <= data_V_data_3_V_dout;
    select_ln65_1_fu_422_p2 <= data_V_data_2_V_dout;
    select_ln65_1_fu_422_p3 <= 
        select_ln65_1_fu_422_p1 when (icmp_ln1496_1_fu_416_p2(0) = '1') else 
        select_ln65_1_fu_422_p2;
    select_ln65_2_fu_436_p3 <= 
        select_ln65_1_fu_422_p3 when (icmp_ln1496_2_fu_430_p2(0) = '1') else 
        select_ln65_fu_408_p3;
    select_ln65_fu_408_p1 <= data_V_data_1_V_dout;
    select_ln65_fu_408_p2 <= data_V_data_0_V_dout;
    select_ln65_fu_408_p3 <= 
        select_ln65_fu_408_p1 when (icmp_ln1496_fu_402_p2(0) = '1') else 
        select_ln65_fu_408_p2;
        sext_ln241_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table4_q0),26));

        sext_ln703_1_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_448_p3),23));

        sext_ln703_2_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_1_V_reg_1273),23));

        sext_ln703_3_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_2_V_reg_1278),23));

        sext_ln703_4_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_3_V_reg_1283),23));

        sext_ln703_5_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_4_V_reg_1288),23));

        sext_ln703_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_array_0_V_reg_1268),23));

    sub_ln1193_1_fu_516_p2 <= std_logic_vector(signed(sext_ln703_2_fu_513_p1) - signed(sext_ln703_1_fu_457_p1));
    sub_ln1193_2_fu_571_p2 <= std_logic_vector(signed(sext_ln703_3_fu_568_p1) - signed(sext_ln703_1_fu_457_p1));
    sub_ln1193_3_fu_626_p2 <= std_logic_vector(signed(sext_ln703_4_fu_623_p1) - signed(sext_ln703_1_fu_457_p1));
    sub_ln1193_4_fu_681_p2 <= std_logic_vector(signed(sext_ln703_5_fu_678_p1) - signed(sext_ln703_1_fu_457_p1));
    sub_ln1193_fu_461_p2 <= std_logic_vector(signed(sext_ln703_fu_454_p1) - signed(sext_ln703_1_fu_457_p1));
    tmp_10_fu_1145_p4 <= p_Val2_19_fu_1102_p2(17 downto 8);
    tmp_11_fu_467_p3 <= sub_ln1193_fu_461_p2(22 downto 22);
    tmp_12_fu_475_p3 <= sub_ln1193_fu_461_p2(21 downto 21);
    tmp_13_fu_522_p3 <= sub_ln1193_1_fu_516_p2(22 downto 22);
    tmp_14_fu_530_p3 <= sub_ln1193_1_fu_516_p2(21 downto 21);
    tmp_15_fu_577_p3 <= sub_ln1193_2_fu_571_p2(22 downto 22);
    tmp_16_fu_585_p3 <= sub_ln1193_2_fu_571_p2(21 downto 21);
    tmp_17_fu_632_p3 <= sub_ln1193_3_fu_626_p2(22 downto 22);
    tmp_18_fu_640_p3 <= sub_ln1193_3_fu_626_p2(21 downto 21);
    tmp_19_fu_687_p3 <= sub_ln1193_4_fu_681_p2(22 downto 22);
    tmp_20_fu_695_p3 <= sub_ln1193_4_fu_681_p2(21 downto 21);
    tmp_7_fu_850_p4 <= sub_ln1193_3_fu_626_p2(21 downto 12);
    tmp_8_fu_772_p4 <= sub_ln1193_1_fu_516_p2(21 downto 12);
    tmp_9_fu_889_p4 <= sub_ln1193_4_fu_681_p2(21 downto 12);
    tmp_fu_733_p4 <= sub_ln1193_fu_461_p2(21 downto 12);
    tmp_s_fu_811_p4 <= sub_ln1193_2_fu_571_p2(21 downto 12);
    underflow_1_fu_1121_p2 <= (xor_ln786_6_fu_1115_p2 and p_Result_17_fu_1094_p3);
    underflow_fu_1029_p2 <= (xor_ln786_5_fu_1023_p2 and p_Result_15_fu_1001_p3);
    x_max_V_fu_448_p3 <= 
        data_array_4_V_reg_1288 when (icmp_ln1496_3_fu_444_p2(0) = '1') else 
        select_ln65_2_reg_1295;
    xor_ln340_10_fu_1035_p2 <= (p_Result_16_fu_1015_p3 xor p_Result_15_fu_1001_p3);
    xor_ln340_11_fu_1041_p2 <= (p_Result_15_fu_1001_p3 xor ap_const_lv1_1);
    xor_ln340_12_fu_1127_p2 <= (p_Result_18_fu_1107_p3 xor p_Result_17_fu_1094_p3);
    xor_ln340_13_fu_1133_p2 <= (p_Result_17_fu_1094_p3 xor ap_const_lv1_1);
    xor_ln340_1_fu_556_p2 <= (tmp_13_fu_522_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_611_p2 <= (tmp_15_fu_577_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_666_p2 <= (tmp_17_fu_632_p3 xor ap_const_lv1_1);
    xor_ln340_4_fu_721_p2 <= (tmp_19_fu_687_p3 xor ap_const_lv1_1);
    xor_ln340_5_fu_495_p2 <= (tmp_12_fu_475_p3 xor tmp_11_fu_467_p3);
    xor_ln340_6_fu_550_p2 <= (tmp_14_fu_530_p3 xor tmp_13_fu_522_p3);
    xor_ln340_7_fu_605_p2 <= (tmp_16_fu_585_p3 xor tmp_15_fu_577_p3);
    xor_ln340_8_fu_660_p2 <= (tmp_18_fu_640_p3 xor tmp_17_fu_632_p3);
    xor_ln340_9_fu_715_p2 <= (tmp_20_fu_695_p3 xor tmp_19_fu_687_p3);
    xor_ln340_fu_501_p2 <= (tmp_11_fu_467_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_538_p2 <= (tmp_14_fu_530_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_593_p2 <= (tmp_16_fu_585_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_648_p2 <= (tmp_18_fu_640_p3 xor ap_const_lv1_1);
    xor_ln786_4_fu_703_p2 <= (tmp_20_fu_695_p3 xor ap_const_lv1_1);
    xor_ln786_5_fu_1023_p2 <= (p_Result_16_fu_1015_p3 xor ap_const_lv1_1);
    xor_ln786_6_fu_1115_p2 <= (p_Result_18_fu_1107_p3 xor ap_const_lv1_1);
    xor_ln786_fu_483_p2 <= (tmp_12_fu_475_p3 xor ap_const_lv1_1);
    y_V_1_fu_798_p3 <= 
        select_ln340_2_fu_782_p3 when (or_ln340_1_fu_562_p2(0) = '1') else 
        select_ln388_1_fu_790_p3;
    y_V_2_fu_837_p3 <= 
        select_ln340_4_fu_821_p3 when (or_ln340_2_fu_617_p2(0) = '1') else 
        select_ln388_2_fu_829_p3;
    y_V_3_fu_876_p3 <= 
        select_ln340_6_fu_860_p3 when (or_ln340_3_fu_672_p2(0) = '1') else 
        select_ln388_3_fu_868_p3;
    y_V_4_fu_915_p3 <= 
        select_ln340_8_fu_899_p3 when (or_ln340_4_fu_727_p2(0) = '1') else 
        select_ln388_4_fu_907_p3;
    y_V_5_fu_1171_p3 <= 
        select_ln340_14_fu_1155_p3 when (or_ln340_6_fu_1139_p2(0) = '1') else 
        select_ln388_6_fu_1163_p3;
    y_V_fu_759_p3 <= 
        select_ln340_fu_743_p3 when (or_ln340_fu_507_p2(0) = '1') else 
        select_ln388_fu_751_p3;
    zext_ln225_1_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_fu_798_p3),64));
    zext_ln225_2_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_fu_837_p3),64));
    zext_ln225_3_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_fu_876_p3),64));
    zext_ln225_4_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_reg_1321),64));
    zext_ln225_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_759_p3),64));
    zext_ln235_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_fu_1171_p3),64));
end behav;
