-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_Softmax_config18_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (21 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (21 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (21 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (21 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (21 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    res_1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_1_V_ap_vld : OUT STD_LOGIC;
    res_2_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_2_V_ap_vld : OUT STD_LOGIC;
    res_3_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_3_V_ap_vld : OUT STD_LOGIC;
    res_4_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_Softmax_config18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1079 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1107 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1121 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1128 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1135 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1142 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_1148 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_reg_1154 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_reg_1160 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_reg_1166 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_699_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1192 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_1197 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1197_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1202 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1202_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1207 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1207_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1212 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1212_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_16_fu_853_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_16_reg_1222 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_1228 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln255_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_1_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_3_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1496_fu_217_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_fu_217_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_223_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln65_fu_223_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_1_fu_231_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_1_fu_231_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_1_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_1_fu_237_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln65_1_fu_237_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln65_fu_223_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln65_1_fu_237_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_2_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_251_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_3_fu_259_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln1496_3_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_265_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln703_fu_273_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal x_max_V_fu_265_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln703_fu_273_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln703_1_fu_277_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1193_fu_281_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln703_2_fu_303_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln703_2_fu_303_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1193_1_fu_307_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln703_3_fu_329_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln703_3_fu_329_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1193_2_fu_333_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln703_4_fu_355_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln703_4_fu_355_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1193_3_fu_359_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln703_5_fu_381_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln703_5_fu_381_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1193_4_fu_385_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal xor_ln786_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_577_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_584_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_fu_591_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_6_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_604_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_611_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_618_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_7_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_2_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_631_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_638_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_645_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_8_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_3_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_658_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_665_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_672_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_9_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_4_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_685_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_4_fu_692_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_6_fu_711_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_fu_715_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_719_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_725_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_741_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_10_fu_745_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_11_fu_749_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_14_fu_755_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_fu_733_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_13_fu_763_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_fu_775_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_fu_771_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_779_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_15_fu_793_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_16_fu_799_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_785_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_5_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_11_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_10_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_837_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_5_fu_845_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_1_fu_865_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_1_fu_868_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_872_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_17_fu_861_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_19_fu_886_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_18_fu_891_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_878_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_6_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_13_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_12_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_929_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal underflow_1_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_14_fu_939_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_6_fu_947_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_fu_955_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_1037_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_1_fu_1044_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_2_fu_1051_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_3_fu_1058_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_fu_1065_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_fu_1037_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1116_fu_968_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_fu_1037_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_1_fu_1044_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_1_fu_1044_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_2_fu_1051_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_2_fu_1051_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_3_fu_1058_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_3_fu_1058_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_4_fu_1065_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_4_fu_1065_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1118_1_fu_1044_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_2_fu_1051_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_3_fu_1058_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_fu_1065_p10 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_fu_1037_p10 : STD_LOGIC_VECTOR (25 downto 0);

    component hls_deepset_pointwisePhi_ioparallel_mul_mul_18s_17ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_Softmax_config18_s_exp_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_Softmax_config18_s_invert_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_Softmax_config18_s_exp_table1
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4);

    invert_table2_U : component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_Softmax_config18_s_invert_table2
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    hls_deepset_pointwisePhi_ioparallel_mul_mul_18s_17ns_26_1_1_U4793 : component hls_deepset_pointwisePhi_ioparallel_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_fu_1037_p0,
        din1 => mul_ln1118_fu_1037_p1,
        dout => mul_ln1118_fu_1037_p2);

    hls_deepset_pointwisePhi_ioparallel_mul_mul_18s_17ns_26_1_1_U4794 : component hls_deepset_pointwisePhi_ioparallel_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_1_fu_1044_p0,
        din1 => mul_ln1118_1_fu_1044_p1,
        dout => mul_ln1118_1_fu_1044_p2);

    hls_deepset_pointwisePhi_ioparallel_mul_mul_18s_17ns_26_1_1_U4795 : component hls_deepset_pointwisePhi_ioparallel_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_2_fu_1051_p0,
        din1 => mul_ln1118_2_fu_1051_p1,
        dout => mul_ln1118_2_fu_1051_p2);

    hls_deepset_pointwisePhi_ioparallel_mul_mul_18s_17ns_26_1_1_U4796 : component hls_deepset_pointwisePhi_ioparallel_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_3_fu_1058_p0,
        din1 => mul_ln1118_3_fu_1058_p1,
        dout => mul_ln1118_3_fu_1058_p2);

    hls_deepset_pointwisePhi_ioparallel_mul_mul_18s_17ns_26_1_1_U4797 : component hls_deepset_pointwisePhi_ioparallel_mul_mul_18s_17ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_4_fu_1065_p0,
        din1 => mul_ln1118_4_fu_1065_p1,
        dout => mul_ln1118_4_fu_1065_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                exp_res_0_V_reg_1197 <= exp_table1_q0;
                exp_res_1_V_reg_1202 <= exp_table1_q1;
                exp_res_2_V_reg_1207 <= exp_table1_q2;
                exp_res_3_V_reg_1212 <= exp_table1_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_res_0_V_reg_1197_pp0_iter3_reg <= exp_res_0_V_reg_1197;
                exp_res_1_V_reg_1202_pp0_iter3_reg <= exp_res_1_V_reg_1202;
                exp_res_2_V_reg_1207_pp0_iter3_reg <= exp_res_2_V_reg_1207;
                exp_res_3_V_reg_1212_pp0_iter3_reg <= exp_res_3_V_reg_1212;
                p_Val2_16_reg_1222 <= p_Val2_16_fu_853_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                exp_res_4_V_reg_1228 <= exp_table1_q4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_10_reg_1107 <= sub_ln1193_2_fu_333_p2(21 downto 21);
                tmp_11_reg_1114 <= sub_ln1193_3_fu_359_p2(22 downto 22);
                tmp_12_reg_1121 <= sub_ln1193_3_fu_359_p2(21 downto 21);
                tmp_13_reg_1128 <= sub_ln1193_4_fu_385_p2(22 downto 22);
                tmp_14_reg_1135 <= sub_ln1193_4_fu_385_p2(21 downto 21);
                tmp_1_reg_1072 <= sub_ln1193_fu_281_p2(22 downto 22);
                tmp_2_reg_1148 <= sub_ln1193_1_fu_307_p2(21 downto 12);
                tmp_3_reg_1079 <= sub_ln1193_fu_281_p2(21 downto 21);
                tmp_4_reg_1154 <= sub_ln1193_2_fu_333_p2(21 downto 12);
                tmp_5_reg_1086 <= sub_ln1193_1_fu_307_p2(22 downto 22);
                tmp_6_reg_1160 <= sub_ln1193_3_fu_359_p2(21 downto 12);
                tmp_7_reg_1093 <= sub_ln1193_1_fu_307_p2(21 downto 21);
                tmp_8_reg_1166 <= sub_ln1193_4_fu_385_p2(21 downto 12);
                tmp_9_reg_1100 <= sub_ln1193_2_fu_333_p2(22 downto 22);
                tmp_reg_1142 <= sub_ln1193_fu_281_p2(21 downto 12);
                y_V_4_reg_1192 <= y_V_4_fu_699_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln786_1_fu_486_p2 <= (xor_ln786_1_fu_481_p2 and tmp_5_reg_1086);
    and_ln786_2_fu_510_p2 <= (xor_ln786_2_fu_505_p2 and tmp_9_reg_1100);
    and_ln786_3_fu_534_p2 <= (xor_ln786_3_fu_529_p2 and tmp_11_reg_1114);
    and_ln786_4_fu_558_p2 <= (xor_ln786_4_fu_553_p2 and tmp_13_reg_1128);
    and_ln786_fu_462_p2 <= (xor_ln786_fu_457_p2 and tmp_1_reg_1072);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_table1_address0 <= zext_ln255_fu_599_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln255_1_fu_626_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln255_2_fu_653_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln255_3_fu_680_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln255_4_fu_707_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_1_fu_231_p0 <= data_2_V_read;
    icmp_ln1496_1_fu_231_p1 <= data_3_V_read;
    icmp_ln1496_1_fu_231_p2 <= "1" when (signed(icmp_ln1496_1_fu_231_p0) < signed(icmp_ln1496_1_fu_231_p1)) else "0";
    icmp_ln1496_2_fu_245_p2 <= "1" when (signed(select_ln65_fu_223_p3) < signed(select_ln65_1_fu_237_p3)) else "0";
    icmp_ln1496_3_fu_259_p1 <= data_4_V_read;
    icmp_ln1496_3_fu_259_p2 <= "1" when (signed(select_ln65_2_fu_251_p3) < signed(icmp_ln1496_3_fu_259_p1)) else "0";
    icmp_ln1496_fu_217_p0 <= data_0_V_read;
    icmp_ln1496_fu_217_p1 <= data_1_V_read;
    icmp_ln1496_fu_217_p2 <= "1" when (signed(icmp_ln1496_fu_217_p0) < signed(icmp_ln1496_fu_217_p1)) else "0";
    invert_table2_address0 <= zext_ln265_fu_963_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_16_reg_1222),19));

        lhs_V_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_12_fu_733_p3),19));

    mul_ln1118_1_fu_1044_p0 <= sext_ln1116_fu_968_p1(18 - 1 downto 0);
    mul_ln1118_1_fu_1044_p1 <= mul_ln1118_1_fu_1044_p10(17 - 1 downto 0);
    mul_ln1118_1_fu_1044_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_1202_pp0_iter3_reg),26));
    mul_ln1118_2_fu_1051_p0 <= sext_ln1116_fu_968_p1(18 - 1 downto 0);
    mul_ln1118_2_fu_1051_p1 <= mul_ln1118_2_fu_1051_p10(17 - 1 downto 0);
    mul_ln1118_2_fu_1051_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_1207_pp0_iter3_reg),26));
    mul_ln1118_3_fu_1058_p0 <= sext_ln1116_fu_968_p1(18 - 1 downto 0);
    mul_ln1118_3_fu_1058_p1 <= mul_ln1118_3_fu_1058_p10(17 - 1 downto 0);
    mul_ln1118_3_fu_1058_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_1212_pp0_iter3_reg),26));
    mul_ln1118_4_fu_1065_p0 <= sext_ln1116_fu_968_p1(18 - 1 downto 0);
    mul_ln1118_4_fu_1065_p1 <= mul_ln1118_4_fu_1065_p10(17 - 1 downto 0);
    mul_ln1118_4_fu_1065_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_1228),26));
    mul_ln1118_fu_1037_p0 <= sext_ln1116_fu_968_p1(18 - 1 downto 0);
    mul_ln1118_fu_1037_p1 <= mul_ln1118_fu_1037_p10(17 - 1 downto 0);
    mul_ln1118_fu_1037_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_1197_pp0_iter3_reg),26));
    or_ln340_1_fu_500_p2 <= (xor_ln340_1_fu_495_p2 or tmp_7_reg_1093);
    or_ln340_2_fu_524_p2 <= (xor_ln340_2_fu_519_p2 or tmp_10_reg_1107);
    or_ln340_3_fu_548_p2 <= (xor_ln340_3_fu_543_p2 or tmp_12_reg_1121);
    or_ln340_4_fu_572_p2 <= (xor_ln340_4_fu_567_p2 or tmp_14_reg_1135);
    or_ln340_5_fu_831_p2 <= (xor_ln340_11_fu_825_p2 or p_Result_16_fu_799_p3);
    or_ln340_6_fu_923_p2 <= (xor_ln340_13_fu_917_p2 or p_Result_18_fu_891_p3);
    or_ln340_fu_476_p2 <= (xor_ln340_fu_471_p2 or tmp_3_reg_1079);
    p_Result_14_fu_755_p3 <= p_Val2_11_fu_749_p2(17 downto 17);
    p_Result_15_fu_785_p3 <= ret_V_fu_779_p2(18 downto 18);
    p_Result_16_fu_799_p3 <= p_Val2_15_fu_793_p2(17 downto 17);
    p_Result_17_fu_878_p3 <= ret_V_1_fu_872_p2(18 downto 18);
    p_Result_18_fu_891_p3 <= p_Val2_19_fu_886_p2(17 downto 17);
    p_Result_s_fu_725_p3 <= p_Val2_8_fu_719_p2(17 downto 17);
    p_Val2_10_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q3),18));
    p_Val2_11_fu_749_p2 <= std_logic_vector(unsigned(p_Val2_9_fu_741_p1) + unsigned(p_Val2_10_fu_745_p1));
    p_Val2_12_fu_733_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_s_fu_725_p3(0) = '1') else 
        p_Val2_8_fu_719_p2;
    p_Val2_13_fu_763_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_14_fu_755_p3(0) = '1') else 
        p_Val2_11_fu_749_p2;
    p_Val2_15_fu_793_p2 <= std_logic_vector(signed(p_Val2_12_fu_733_p3) + signed(p_Val2_13_fu_763_p3));
    p_Val2_16_fu_853_p3 <= 
        select_ln340_12_fu_837_p3 when (or_ln340_5_fu_831_p2(0) = '1') else 
        select_ln388_5_fu_845_p3;
    p_Val2_17_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q4),18));
    p_Val2_19_fu_886_p2 <= std_logic_vector(unsigned(p_Val2_17_fu_861_p1) + unsigned(p_Val2_16_reg_1222));
    p_Val2_6_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q0),18));
    p_Val2_7_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q1),18));
    p_Val2_8_fu_719_p2 <= std_logic_vector(unsigned(p_Val2_6_fu_711_p1) + unsigned(p_Val2_7_fu_715_p1));
    p_Val2_9_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q2),18));
    res_0_V <= mul_ln1118_fu_1037_p2(25 downto 10);

    res_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V <= mul_ln1118_1_fu_1044_p2(25 downto 10);

    res_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_1_V_ap_vld <= ap_const_logic_1;
        else 
            res_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V <= mul_ln1118_2_fu_1051_p2(25 downto 10);

    res_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_2_V_ap_vld <= ap_const_logic_1;
        else 
            res_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V <= mul_ln1118_3_fu_1058_p2(25 downto 10);

    res_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_3_V_ap_vld <= ap_const_logic_1;
        else 
            res_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V <= mul_ln1118_4_fu_1065_p2(25 downto 10);

    res_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_4_V_ap_vld <= ap_const_logic_1;
        else 
            res_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_872_p2 <= std_logic_vector(signed(lhs_V_1_fu_865_p1) + signed(rhs_V_1_fu_868_p1));
    ret_V_fu_779_p2 <= std_logic_vector(signed(rhs_V_fu_775_p1) + signed(lhs_V_fu_771_p1));
    rhs_V_1_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q4),19));
        rhs_V_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_fu_763_p3),19));

    select_ln340_12_fu_837_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_10_fu_819_p2(0) = '1') else 
        p_Val2_15_fu_793_p2;
    select_ln340_14_fu_939_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_12_fu_911_p2(0) = '1') else 
        tmp_s_fu_929_p4;
    select_ln340_2_fu_604_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_6_fu_491_p2(0) = '1') else 
        tmp_2_reg_1148;
    select_ln340_4_fu_631_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_7_fu_515_p2(0) = '1') else 
        tmp_4_reg_1154;
    select_ln340_6_fu_658_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_8_fu_539_p2(0) = '1') else 
        tmp_6_reg_1160;
    select_ln340_8_fu_685_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_9_fu_563_p2(0) = '1') else 
        tmp_8_reg_1166;
    select_ln340_fu_577_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_5_fu_467_p2(0) = '1') else 
        tmp_reg_1142;
    select_ln388_1_fu_611_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_486_p2(0) = '1') else 
        tmp_2_reg_1148;
    select_ln388_2_fu_638_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_510_p2(0) = '1') else 
        tmp_4_reg_1154;
    select_ln388_3_fu_665_p3 <= 
        ap_const_lv10_200 when (and_ln786_3_fu_534_p2(0) = '1') else 
        tmp_6_reg_1160;
    select_ln388_4_fu_692_p3 <= 
        ap_const_lv10_200 when (and_ln786_4_fu_558_p2(0) = '1') else 
        tmp_8_reg_1166;
    select_ln388_5_fu_845_p3 <= 
        ap_const_lv18_20000 when (underflow_fu_813_p2(0) = '1') else 
        p_Val2_15_fu_793_p2;
    select_ln388_6_fu_947_p3 <= 
        ap_const_lv10_200 when (underflow_1_fu_905_p2(0) = '1') else 
        tmp_s_fu_929_p4;
    select_ln388_fu_584_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_462_p2(0) = '1') else 
        tmp_reg_1142;
    select_ln65_1_fu_237_p1 <= data_3_V_read;
    select_ln65_1_fu_237_p2 <= data_2_V_read;
    select_ln65_1_fu_237_p3 <= 
        select_ln65_1_fu_237_p1 when (icmp_ln1496_1_fu_231_p2(0) = '1') else 
        select_ln65_1_fu_237_p2;
    select_ln65_2_fu_251_p3 <= 
        select_ln65_1_fu_237_p3 when (icmp_ln1496_2_fu_245_p2(0) = '1') else 
        select_ln65_fu_223_p3;
    select_ln65_fu_223_p1 <= data_1_V_read;
    select_ln65_fu_223_p2 <= data_0_V_read;
    select_ln65_fu_223_p3 <= 
        select_ln65_fu_223_p1 when (icmp_ln1496_fu_217_p2(0) = '1') else 
        select_ln65_fu_223_p2;
        sext_ln1116_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table2_q0),26));

        sext_ln703_1_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_265_p3),23));

    sext_ln703_2_fu_303_p0 <= data_1_V_read;
        sext_ln703_2_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2_fu_303_p0),23));

    sext_ln703_3_fu_329_p0 <= data_2_V_read;
        sext_ln703_3_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_3_fu_329_p0),23));

    sext_ln703_4_fu_355_p0 <= data_3_V_read;
        sext_ln703_4_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_4_fu_355_p0),23));

    sext_ln703_5_fu_381_p0 <= data_4_V_read;
        sext_ln703_5_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_5_fu_381_p0),23));

    sext_ln703_fu_273_p0 <= data_0_V_read;
        sext_ln703_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_273_p0),23));

    sub_ln1193_1_fu_307_p2 <= std_logic_vector(signed(sext_ln703_2_fu_303_p1) - signed(sext_ln703_1_fu_277_p1));
    sub_ln1193_2_fu_333_p2 <= std_logic_vector(signed(sext_ln703_3_fu_329_p1) - signed(sext_ln703_1_fu_277_p1));
    sub_ln1193_3_fu_359_p2 <= std_logic_vector(signed(sext_ln703_4_fu_355_p1) - signed(sext_ln703_1_fu_277_p1));
    sub_ln1193_4_fu_385_p2 <= std_logic_vector(signed(sext_ln703_5_fu_381_p1) - signed(sext_ln703_1_fu_277_p1));
    sub_ln1193_fu_281_p2 <= std_logic_vector(signed(sext_ln703_fu_273_p1) - signed(sext_ln703_1_fu_277_p1));
    tmp_s_fu_929_p4 <= p_Val2_19_fu_886_p2(17 downto 8);
    underflow_1_fu_905_p2 <= (xor_ln786_6_fu_899_p2 and p_Result_17_fu_878_p3);
    underflow_fu_813_p2 <= (xor_ln786_5_fu_807_p2 and p_Result_15_fu_785_p3);
    x_max_V_fu_265_p1 <= data_4_V_read;
    x_max_V_fu_265_p3 <= 
        x_max_V_fu_265_p1 when (icmp_ln1496_3_fu_259_p2(0) = '1') else 
        select_ln65_2_fu_251_p3;
    xor_ln340_10_fu_819_p2 <= (p_Result_16_fu_799_p3 xor p_Result_15_fu_785_p3);
    xor_ln340_11_fu_825_p2 <= (p_Result_15_fu_785_p3 xor ap_const_lv1_1);
    xor_ln340_12_fu_911_p2 <= (p_Result_18_fu_891_p3 xor p_Result_17_fu_878_p3);
    xor_ln340_13_fu_917_p2 <= (p_Result_17_fu_878_p3 xor ap_const_lv1_1);
    xor_ln340_1_fu_495_p2 <= (tmp_5_reg_1086 xor ap_const_lv1_1);
    xor_ln340_2_fu_519_p2 <= (tmp_9_reg_1100 xor ap_const_lv1_1);
    xor_ln340_3_fu_543_p2 <= (tmp_11_reg_1114 xor ap_const_lv1_1);
    xor_ln340_4_fu_567_p2 <= (tmp_13_reg_1128 xor ap_const_lv1_1);
    xor_ln340_5_fu_467_p2 <= (tmp_3_reg_1079 xor tmp_1_reg_1072);
    xor_ln340_6_fu_491_p2 <= (tmp_7_reg_1093 xor tmp_5_reg_1086);
    xor_ln340_7_fu_515_p2 <= (tmp_9_reg_1100 xor tmp_10_reg_1107);
    xor_ln340_8_fu_539_p2 <= (tmp_12_reg_1121 xor tmp_11_reg_1114);
    xor_ln340_9_fu_563_p2 <= (tmp_14_reg_1135 xor tmp_13_reg_1128);
    xor_ln340_fu_471_p2 <= (tmp_1_reg_1072 xor ap_const_lv1_1);
    xor_ln786_1_fu_481_p2 <= (tmp_7_reg_1093 xor ap_const_lv1_1);
    xor_ln786_2_fu_505_p2 <= (tmp_10_reg_1107 xor ap_const_lv1_1);
    xor_ln786_3_fu_529_p2 <= (tmp_12_reg_1121 xor ap_const_lv1_1);
    xor_ln786_4_fu_553_p2 <= (tmp_14_reg_1135 xor ap_const_lv1_1);
    xor_ln786_5_fu_807_p2 <= (p_Result_16_fu_799_p3 xor ap_const_lv1_1);
    xor_ln786_6_fu_899_p2 <= (p_Result_18_fu_891_p3 xor ap_const_lv1_1);
    xor_ln786_fu_457_p2 <= (tmp_3_reg_1079 xor ap_const_lv1_1);
    y_V_1_fu_618_p3 <= 
        select_ln340_2_fu_604_p3 when (or_ln340_1_fu_500_p2(0) = '1') else 
        select_ln388_1_fu_611_p3;
    y_V_2_fu_645_p3 <= 
        select_ln340_4_fu_631_p3 when (or_ln340_2_fu_524_p2(0) = '1') else 
        select_ln388_2_fu_638_p3;
    y_V_3_fu_672_p3 <= 
        select_ln340_6_fu_658_p3 when (or_ln340_3_fu_548_p2(0) = '1') else 
        select_ln388_3_fu_665_p3;
    y_V_4_fu_699_p3 <= 
        select_ln340_8_fu_685_p3 when (or_ln340_4_fu_572_p2(0) = '1') else 
        select_ln388_4_fu_692_p3;
    y_V_5_fu_955_p3 <= 
        select_ln340_14_fu_939_p3 when (or_ln340_6_fu_923_p2(0) = '1') else 
        select_ln388_6_fu_947_p3;
    y_V_fu_591_p3 <= 
        select_ln340_fu_577_p3 when (or_ln340_fu_476_p2(0) = '1') else 
        select_ln388_fu_584_p3;
    zext_ln255_1_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_fu_618_p3),64));
    zext_ln255_2_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_fu_645_p3),64));
    zext_ln255_3_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_fu_672_p3),64));
    zext_ln255_4_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_reg_1192),64));
    zext_ln255_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_591_p3),64));
    zext_ln265_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_fu_955_p3),64));
end behav;
