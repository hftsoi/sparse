-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity model_test is
port (
    x_in : IN STD_LOGIC_VECTOR (1199 downto 0);
    layer2_out_0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    layer2_out_1 : IN STD_LOGIC_VECTOR (24 downto 0);
    layer2_out_2 : IN STD_LOGIC_VECTOR (24 downto 0);
    layer2_out_3 : IN STD_LOGIC_VECTOR (24 downto 0);
    layer2_out_4 : IN STD_LOGIC_VECTOR (24 downto 0);
    layer2_out_5 : IN STD_LOGIC_VECTOR (24 downto 0);
    layer2_out_6 : IN STD_LOGIC_VECTOR (24 downto 0);
    layer2_out_7 : IN STD_LOGIC_VECTOR (24 downto 0);
    layer2_out_8 : IN STD_LOGIC_VECTOR (24 downto 0);
    layer2_out_9 : IN STD_LOGIC_VECTOR (24 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x_in_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    layer2_out_0_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of model_test is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "model_test_model_test,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu13p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.186562,HLS_SYN_LAT=7,HLS_SYN_TPT=7,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1098,HLS_SYN_LUT=3223,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal sparse_input_U0_ap_start : STD_LOGIC;
    signal sparse_input_U0_ap_done : STD_LOGIC;
    signal sparse_input_U0_ap_continue : STD_LOGIC;
    signal sparse_input_U0_ap_idle : STD_LOGIC;
    signal sparse_input_U0_ap_ready : STD_LOGIC;
    signal sparse_input_U0_ap_return_0 : STD_LOGIC_VECTOR (1 downto 0);
    signal sparse_input_U0_ap_return_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sparse_input_U0_ap_return_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sparse_input_U0_ap_return_3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sparse_input_U0_ap_return_4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sparse_input_U0_ap_return_5 : STD_LOGIC_VECTOR (1 downto 0);
    signal sparse_input_U0_ap_return_6 : STD_LOGIC_VECTOR (3 downto 0);
    signal sparse_input_U0_ap_return_7 : STD_LOGIC_VECTOR (3 downto 0);
    signal sparse_input_U0_ap_return_8 : STD_LOGIC_VECTOR (3 downto 0);
    signal sparse_input_U0_ap_return_9 : STD_LOGIC_VECTOR (1 downto 0);
    signal sparse_input_U0_ap_return_10 : STD_LOGIC_VECTOR (3 downto 0);
    signal sparse_input_U0_ap_return_11 : STD_LOGIC_VECTOR (11 downto 0);
    signal sparse_input_U0_ap_return_12 : STD_LOGIC_VECTOR (11 downto 0);
    signal sparse_input_U0_ap_return_13 : STD_LOGIC_VECTOR (11 downto 0);
    signal sparse_input_U0_ap_return_14 : STD_LOGIC_VECTOR (11 downto 0);
    signal sparse_input_U0_ap_return_15 : STD_LOGIC_VECTOR (11 downto 0);
    signal sparse_input_U0_ap_return_16 : STD_LOGIC_VECTOR (11 downto 0);
    signal sparse_input_U0_ap_return_17 : STD_LOGIC_VECTOR (11 downto 0);
    signal sparse_input_U0_ap_return_18 : STD_LOGIC_VECTOR (11 downto 0);
    signal sparse_input_U0_ap_return_19 : STD_LOGIC_VECTOR (11 downto 0);
    signal sparse_input_U0_ap_return_20 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_channel_done_feat_arr_8 : STD_LOGIC;
    signal feat_arr_8_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_feat_arr_8 : STD_LOGIC := '0';
    signal ap_sync_channel_write_feat_arr_8 : STD_LOGIC;
    signal ap_channel_done_feat_arr_7 : STD_LOGIC;
    signal feat_arr_7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_feat_arr_7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_feat_arr_7 : STD_LOGIC;
    signal ap_channel_done_feat_arr_6 : STD_LOGIC;
    signal feat_arr_6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_feat_arr_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_feat_arr_6 : STD_LOGIC;
    signal ap_channel_done_feat_arr_5 : STD_LOGIC;
    signal feat_arr_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_feat_arr_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_feat_arr_5 : STD_LOGIC;
    signal ap_channel_done_feat_arr_4 : STD_LOGIC;
    signal feat_arr_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_feat_arr_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_feat_arr_4 : STD_LOGIC;
    signal ap_channel_done_feat_arr_3 : STD_LOGIC;
    signal feat_arr_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_feat_arr_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_feat_arr_3 : STD_LOGIC;
    signal ap_channel_done_feat_arr_2 : STD_LOGIC;
    signal feat_arr_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_feat_arr_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_feat_arr_2 : STD_LOGIC;
    signal ap_channel_done_feat_arr_1 : STD_LOGIC;
    signal feat_arr_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_feat_arr_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_feat_arr_1 : STD_LOGIC;
    signal ap_channel_done_feat_arr : STD_LOGIC;
    signal feat_arr_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_feat_arr : STD_LOGIC := '0';
    signal ap_sync_channel_write_feat_arr : STD_LOGIC;
    signal ap_channel_done_newret21 : STD_LOGIC;
    signal newret21_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_newret21 : STD_LOGIC := '0';
    signal ap_sync_channel_write_newret21 : STD_LOGIC;
    signal ap_channel_done_hash_arr_10 : STD_LOGIC;
    signal hash_arr_10_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hash_arr_10 : STD_LOGIC := '0';
    signal ap_sync_channel_write_hash_arr_10 : STD_LOGIC;
    signal ap_channel_done_hash_arr_9 : STD_LOGIC;
    signal hash_arr_9_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hash_arr_9 : STD_LOGIC := '0';
    signal ap_sync_channel_write_hash_arr_9 : STD_LOGIC;
    signal ap_channel_done_hash_arr_8 : STD_LOGIC;
    signal hash_arr_8_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hash_arr_8 : STD_LOGIC := '0';
    signal ap_sync_channel_write_hash_arr_8 : STD_LOGIC;
    signal ap_channel_done_hash_arr_7 : STD_LOGIC;
    signal hash_arr_7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hash_arr_7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_hash_arr_7 : STD_LOGIC;
    signal ap_channel_done_hash_arr_6 : STD_LOGIC;
    signal hash_arr_6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hash_arr_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_hash_arr_6 : STD_LOGIC;
    signal ap_channel_done_hash_arr_5 : STD_LOGIC;
    signal hash_arr_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hash_arr_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_hash_arr_5 : STD_LOGIC;
    signal ap_channel_done_hash_arr_4 : STD_LOGIC;
    signal hash_arr_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hash_arr_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_hash_arr_4 : STD_LOGIC;
    signal ap_channel_done_hash_arr_3 : STD_LOGIC;
    signal hash_arr_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hash_arr_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_hash_arr_3 : STD_LOGIC;
    signal ap_channel_done_hash_arr_2 : STD_LOGIC;
    signal hash_arr_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hash_arr_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_hash_arr_2 : STD_LOGIC;
    signal ap_channel_done_hash_arr_1 : STD_LOGIC;
    signal hash_arr_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hash_arr_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_hash_arr_1 : STD_LOGIC;
    signal ap_channel_done_hash_arr : STD_LOGIC;
    signal hash_arr_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_hash_arr : STD_LOGIC := '0';
    signal ap_sync_channel_write_hash_arr : STD_LOGIC;
    signal sparse_compute_U0_ap_start : STD_LOGIC;
    signal sparse_compute_U0_ap_done : STD_LOGIC;
    signal sparse_compute_U0_ap_continue : STD_LOGIC;
    signal sparse_compute_U0_ap_idle : STD_LOGIC;
    signal sparse_compute_U0_ap_ready : STD_LOGIC;
    signal sparse_compute_U0_ap_return : STD_LOGIC_VECTOR (20 downto 0);
    signal feat_out_channel_full_n : STD_LOGIC;
    signal Block_entry16_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry16_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry16_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry16_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry16_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry16_proc_U0_ap_return : STD_LOGIC_VECTOR (20 downto 0);
    signal feat_out_load_loc_channel_full_n : STD_LOGIC;
    signal Block_entry17_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry17_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry17_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry17_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry17_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry17_proc_U0_layer2_out_0 : STD_LOGIC_VECTOR (24 downto 0);
    signal Block_entry17_proc_U0_layer2_out_0_ap_vld : STD_LOGIC;
    signal hash_arr_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_empty_n : STD_LOGIC;
    signal hash_arr_1_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_1_empty_n : STD_LOGIC;
    signal hash_arr_2_dout : STD_LOGIC_VECTOR (2 downto 0);
    signal hash_arr_2_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_2_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_2_empty_n : STD_LOGIC;
    signal hash_arr_3_dout : STD_LOGIC_VECTOR (2 downto 0);
    signal hash_arr_3_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_3_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_3_empty_n : STD_LOGIC;
    signal hash_arr_4_dout : STD_LOGIC_VECTOR (2 downto 0);
    signal hash_arr_4_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_4_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_4_empty_n : STD_LOGIC;
    signal hash_arr_5_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_5_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_5_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_5_empty_n : STD_LOGIC;
    signal hash_arr_6_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal hash_arr_6_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_6_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_6_empty_n : STD_LOGIC;
    signal hash_arr_7_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal hash_arr_7_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_7_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_7_empty_n : STD_LOGIC;
    signal hash_arr_8_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal hash_arr_8_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_8_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_8_empty_n : STD_LOGIC;
    signal hash_arr_9_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_9_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_9_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_9_empty_n : STD_LOGIC;
    signal hash_arr_10_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal hash_arr_10_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_10_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_arr_10_empty_n : STD_LOGIC;
    signal newret21_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal newret21_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal newret21_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal newret21_empty_n : STD_LOGIC;
    signal feat_arr_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal feat_arr_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_empty_n : STD_LOGIC;
    signal feat_arr_1_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal feat_arr_1_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_1_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_1_empty_n : STD_LOGIC;
    signal feat_arr_2_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal feat_arr_2_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_2_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_2_empty_n : STD_LOGIC;
    signal feat_arr_3_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal feat_arr_3_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_3_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_3_empty_n : STD_LOGIC;
    signal feat_arr_4_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal feat_arr_4_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_4_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_4_empty_n : STD_LOGIC;
    signal feat_arr_5_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal feat_arr_5_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_5_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_5_empty_n : STD_LOGIC;
    signal feat_arr_6_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal feat_arr_6_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_6_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_6_empty_n : STD_LOGIC;
    signal feat_arr_7_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal feat_arr_7_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_7_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_7_empty_n : STD_LOGIC;
    signal feat_arr_8_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal feat_arr_8_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_8_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_arr_8_empty_n : STD_LOGIC;
    signal feat_out_channel_dout : STD_LOGIC_VECTOR (20 downto 0);
    signal feat_out_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_out_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_out_channel_empty_n : STD_LOGIC;
    signal feat_out_load_loc_channel_dout : STD_LOGIC_VECTOR (20 downto 0);
    signal feat_out_load_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_out_load_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal feat_out_load_loc_channel_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component model_test_sparse_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_in : IN STD_LOGIC_VECTOR (1199 downto 0);
        x_in_ap_vld : IN STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (2 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (1 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (1 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component model_test_sparse_compute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (1 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (1 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (2 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (1 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (3 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (3 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (3 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (1 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (3 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component model_test_Block_entry16_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (20 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component model_test_Block_entry17_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read9 : IN STD_LOGIC_VECTOR (20 downto 0);
        layer2_out_0 : OUT STD_LOGIC_VECTOR (24 downto 0);
        layer2_out_0_ap_vld : OUT STD_LOGIC );
    end component;


    component model_test_fifo_w2_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component model_test_fifo_w3_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (2 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component model_test_fifo_w4_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (3 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component model_test_fifo_w12_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component model_test_fifo_w21_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (20 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (20 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    sparse_input_U0 : component model_test_sparse_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => sparse_input_U0_ap_start,
        ap_done => sparse_input_U0_ap_done,
        ap_continue => sparse_input_U0_ap_continue,
        ap_idle => sparse_input_U0_ap_idle,
        ap_ready => sparse_input_U0_ap_ready,
        x_in => x_in,
        x_in_ap_vld => x_in_ap_vld,
        ap_return_0 => sparse_input_U0_ap_return_0,
        ap_return_1 => sparse_input_U0_ap_return_1,
        ap_return_2 => sparse_input_U0_ap_return_2,
        ap_return_3 => sparse_input_U0_ap_return_3,
        ap_return_4 => sparse_input_U0_ap_return_4,
        ap_return_5 => sparse_input_U0_ap_return_5,
        ap_return_6 => sparse_input_U0_ap_return_6,
        ap_return_7 => sparse_input_U0_ap_return_7,
        ap_return_8 => sparse_input_U0_ap_return_8,
        ap_return_9 => sparse_input_U0_ap_return_9,
        ap_return_10 => sparse_input_U0_ap_return_10,
        ap_return_11 => sparse_input_U0_ap_return_11,
        ap_return_12 => sparse_input_U0_ap_return_12,
        ap_return_13 => sparse_input_U0_ap_return_13,
        ap_return_14 => sparse_input_U0_ap_return_14,
        ap_return_15 => sparse_input_U0_ap_return_15,
        ap_return_16 => sparse_input_U0_ap_return_16,
        ap_return_17 => sparse_input_U0_ap_return_17,
        ap_return_18 => sparse_input_U0_ap_return_18,
        ap_return_19 => sparse_input_U0_ap_return_19,
        ap_return_20 => sparse_input_U0_ap_return_20);

    sparse_compute_U0 : component model_test_sparse_compute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => sparse_compute_U0_ap_start,
        ap_done => sparse_compute_U0_ap_done,
        ap_continue => sparse_compute_U0_ap_continue,
        ap_idle => sparse_compute_U0_ap_idle,
        ap_ready => sparse_compute_U0_ap_ready,
        p_read1 => hash_arr_dout,
        p_read3 => hash_arr_1_dout,
        p_read5 => hash_arr_2_dout,
        p_read7 => hash_arr_3_dout,
        p_read9 => hash_arr_4_dout,
        p_read11 => hash_arr_5_dout,
        p_read13 => hash_arr_6_dout,
        p_read15 => hash_arr_7_dout,
        p_read17 => hash_arr_8_dout,
        p_read18 => hash_arr_9_dout,
        p_read19 => hash_arr_10_dout,
        p_read20 => newret21_dout,
        p_read21 => feat_arr_dout,
        p_read22 => feat_arr_1_dout,
        p_read23 => feat_arr_2_dout,
        p_read24 => feat_arr_3_dout,
        p_read25 => feat_arr_4_dout,
        p_read26 => feat_arr_5_dout,
        p_read27 => feat_arr_6_dout,
        p_read28 => feat_arr_7_dout,
        p_read29 => feat_arr_8_dout,
        ap_return => sparse_compute_U0_ap_return);

    Block_entry16_proc_U0 : component model_test_Block_entry16_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry16_proc_U0_ap_start,
        ap_done => Block_entry16_proc_U0_ap_done,
        ap_continue => Block_entry16_proc_U0_ap_continue,
        ap_idle => Block_entry16_proc_U0_ap_idle,
        ap_ready => Block_entry16_proc_U0_ap_ready,
        p_read => feat_out_channel_dout,
        ap_return => Block_entry16_proc_U0_ap_return);

    Block_entry17_proc_U0 : component model_test_Block_entry17_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry17_proc_U0_ap_start,
        ap_done => Block_entry17_proc_U0_ap_done,
        ap_continue => Block_entry17_proc_U0_ap_continue,
        ap_idle => Block_entry17_proc_U0_ap_idle,
        ap_ready => Block_entry17_proc_U0_ap_ready,
        p_read9 => feat_out_load_loc_channel_dout,
        layer2_out_0 => Block_entry17_proc_U0_layer2_out_0,
        layer2_out_0_ap_vld => Block_entry17_proc_U0_layer2_out_0_ap_vld);

    hash_arr_U : component model_test_fifo_w2_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_0,
        if_full_n => hash_arr_full_n,
        if_write => ap_channel_done_hash_arr,
        if_dout => hash_arr_dout,
        if_num_data_valid => hash_arr_num_data_valid,
        if_fifo_cap => hash_arr_fifo_cap,
        if_empty_n => hash_arr_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    hash_arr_1_U : component model_test_fifo_w2_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_1,
        if_full_n => hash_arr_1_full_n,
        if_write => ap_channel_done_hash_arr_1,
        if_dout => hash_arr_1_dout,
        if_num_data_valid => hash_arr_1_num_data_valid,
        if_fifo_cap => hash_arr_1_fifo_cap,
        if_empty_n => hash_arr_1_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    hash_arr_2_U : component model_test_fifo_w3_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_2,
        if_full_n => hash_arr_2_full_n,
        if_write => ap_channel_done_hash_arr_2,
        if_dout => hash_arr_2_dout,
        if_num_data_valid => hash_arr_2_num_data_valid,
        if_fifo_cap => hash_arr_2_fifo_cap,
        if_empty_n => hash_arr_2_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    hash_arr_3_U : component model_test_fifo_w3_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_3,
        if_full_n => hash_arr_3_full_n,
        if_write => ap_channel_done_hash_arr_3,
        if_dout => hash_arr_3_dout,
        if_num_data_valid => hash_arr_3_num_data_valid,
        if_fifo_cap => hash_arr_3_fifo_cap,
        if_empty_n => hash_arr_3_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    hash_arr_4_U : component model_test_fifo_w3_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_4,
        if_full_n => hash_arr_4_full_n,
        if_write => ap_channel_done_hash_arr_4,
        if_dout => hash_arr_4_dout,
        if_num_data_valid => hash_arr_4_num_data_valid,
        if_fifo_cap => hash_arr_4_fifo_cap,
        if_empty_n => hash_arr_4_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    hash_arr_5_U : component model_test_fifo_w2_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_5,
        if_full_n => hash_arr_5_full_n,
        if_write => ap_channel_done_hash_arr_5,
        if_dout => hash_arr_5_dout,
        if_num_data_valid => hash_arr_5_num_data_valid,
        if_fifo_cap => hash_arr_5_fifo_cap,
        if_empty_n => hash_arr_5_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    hash_arr_6_U : component model_test_fifo_w4_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_6,
        if_full_n => hash_arr_6_full_n,
        if_write => ap_channel_done_hash_arr_6,
        if_dout => hash_arr_6_dout,
        if_num_data_valid => hash_arr_6_num_data_valid,
        if_fifo_cap => hash_arr_6_fifo_cap,
        if_empty_n => hash_arr_6_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    hash_arr_7_U : component model_test_fifo_w4_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_7,
        if_full_n => hash_arr_7_full_n,
        if_write => ap_channel_done_hash_arr_7,
        if_dout => hash_arr_7_dout,
        if_num_data_valid => hash_arr_7_num_data_valid,
        if_fifo_cap => hash_arr_7_fifo_cap,
        if_empty_n => hash_arr_7_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    hash_arr_8_U : component model_test_fifo_w4_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_8,
        if_full_n => hash_arr_8_full_n,
        if_write => ap_channel_done_hash_arr_8,
        if_dout => hash_arr_8_dout,
        if_num_data_valid => hash_arr_8_num_data_valid,
        if_fifo_cap => hash_arr_8_fifo_cap,
        if_empty_n => hash_arr_8_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    hash_arr_9_U : component model_test_fifo_w2_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_9,
        if_full_n => hash_arr_9_full_n,
        if_write => ap_channel_done_hash_arr_9,
        if_dout => hash_arr_9_dout,
        if_num_data_valid => hash_arr_9_num_data_valid,
        if_fifo_cap => hash_arr_9_fifo_cap,
        if_empty_n => hash_arr_9_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    hash_arr_10_U : component model_test_fifo_w4_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_10,
        if_full_n => hash_arr_10_full_n,
        if_write => ap_channel_done_hash_arr_10,
        if_dout => hash_arr_10_dout,
        if_num_data_valid => hash_arr_10_num_data_valid,
        if_fifo_cap => hash_arr_10_fifo_cap,
        if_empty_n => hash_arr_10_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    newret21_U : component model_test_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_11,
        if_full_n => newret21_full_n,
        if_write => ap_channel_done_newret21,
        if_dout => newret21_dout,
        if_num_data_valid => newret21_num_data_valid,
        if_fifo_cap => newret21_fifo_cap,
        if_empty_n => newret21_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    feat_arr_U : component model_test_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_12,
        if_full_n => feat_arr_full_n,
        if_write => ap_channel_done_feat_arr,
        if_dout => feat_arr_dout,
        if_num_data_valid => feat_arr_num_data_valid,
        if_fifo_cap => feat_arr_fifo_cap,
        if_empty_n => feat_arr_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    feat_arr_1_U : component model_test_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_13,
        if_full_n => feat_arr_1_full_n,
        if_write => ap_channel_done_feat_arr_1,
        if_dout => feat_arr_1_dout,
        if_num_data_valid => feat_arr_1_num_data_valid,
        if_fifo_cap => feat_arr_1_fifo_cap,
        if_empty_n => feat_arr_1_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    feat_arr_2_U : component model_test_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_14,
        if_full_n => feat_arr_2_full_n,
        if_write => ap_channel_done_feat_arr_2,
        if_dout => feat_arr_2_dout,
        if_num_data_valid => feat_arr_2_num_data_valid,
        if_fifo_cap => feat_arr_2_fifo_cap,
        if_empty_n => feat_arr_2_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    feat_arr_3_U : component model_test_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_15,
        if_full_n => feat_arr_3_full_n,
        if_write => ap_channel_done_feat_arr_3,
        if_dout => feat_arr_3_dout,
        if_num_data_valid => feat_arr_3_num_data_valid,
        if_fifo_cap => feat_arr_3_fifo_cap,
        if_empty_n => feat_arr_3_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    feat_arr_4_U : component model_test_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_16,
        if_full_n => feat_arr_4_full_n,
        if_write => ap_channel_done_feat_arr_4,
        if_dout => feat_arr_4_dout,
        if_num_data_valid => feat_arr_4_num_data_valid,
        if_fifo_cap => feat_arr_4_fifo_cap,
        if_empty_n => feat_arr_4_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    feat_arr_5_U : component model_test_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_17,
        if_full_n => feat_arr_5_full_n,
        if_write => ap_channel_done_feat_arr_5,
        if_dout => feat_arr_5_dout,
        if_num_data_valid => feat_arr_5_num_data_valid,
        if_fifo_cap => feat_arr_5_fifo_cap,
        if_empty_n => feat_arr_5_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    feat_arr_6_U : component model_test_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_18,
        if_full_n => feat_arr_6_full_n,
        if_write => ap_channel_done_feat_arr_6,
        if_dout => feat_arr_6_dout,
        if_num_data_valid => feat_arr_6_num_data_valid,
        if_fifo_cap => feat_arr_6_fifo_cap,
        if_empty_n => feat_arr_6_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    feat_arr_7_U : component model_test_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_19,
        if_full_n => feat_arr_7_full_n,
        if_write => ap_channel_done_feat_arr_7,
        if_dout => feat_arr_7_dout,
        if_num_data_valid => feat_arr_7_num_data_valid,
        if_fifo_cap => feat_arr_7_fifo_cap,
        if_empty_n => feat_arr_7_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    feat_arr_8_U : component model_test_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_input_U0_ap_return_20,
        if_full_n => feat_arr_8_full_n,
        if_write => ap_channel_done_feat_arr_8,
        if_dout => feat_arr_8_dout,
        if_num_data_valid => feat_arr_8_num_data_valid,
        if_fifo_cap => feat_arr_8_fifo_cap,
        if_empty_n => feat_arr_8_empty_n,
        if_read => sparse_compute_U0_ap_ready);

    feat_out_channel_U : component model_test_fifo_w21_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sparse_compute_U0_ap_return,
        if_full_n => feat_out_channel_full_n,
        if_write => sparse_compute_U0_ap_done,
        if_dout => feat_out_channel_dout,
        if_num_data_valid => feat_out_channel_num_data_valid,
        if_fifo_cap => feat_out_channel_fifo_cap,
        if_empty_n => feat_out_channel_empty_n,
        if_read => Block_entry16_proc_U0_ap_ready);

    feat_out_load_loc_channel_U : component model_test_fifo_w21_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry16_proc_U0_ap_return,
        if_full_n => feat_out_load_loc_channel_full_n,
        if_write => Block_entry16_proc_U0_ap_done,
        if_dout => feat_out_load_loc_channel_dout,
        if_num_data_valid => feat_out_load_loc_channel_num_data_valid,
        if_fifo_cap => feat_out_load_loc_channel_fifo_cap,
        if_empty_n => feat_out_load_loc_channel_empty_n,
        if_read => Block_entry17_proc_U0_ap_ready);





    ap_sync_reg_channel_write_feat_arr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_feat_arr <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_feat_arr <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_feat_arr <= ap_sync_channel_write_feat_arr;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_feat_arr_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_feat_arr_1 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_feat_arr_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_feat_arr_1 <= ap_sync_channel_write_feat_arr_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_feat_arr_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_feat_arr_2 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_feat_arr_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_feat_arr_2 <= ap_sync_channel_write_feat_arr_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_feat_arr_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_feat_arr_3 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_feat_arr_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_feat_arr_3 <= ap_sync_channel_write_feat_arr_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_feat_arr_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_feat_arr_4 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_feat_arr_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_feat_arr_4 <= ap_sync_channel_write_feat_arr_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_feat_arr_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_feat_arr_5 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_feat_arr_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_feat_arr_5 <= ap_sync_channel_write_feat_arr_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_feat_arr_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_feat_arr_6 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_feat_arr_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_feat_arr_6 <= ap_sync_channel_write_feat_arr_6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_feat_arr_7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_feat_arr_7 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_feat_arr_7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_feat_arr_7 <= ap_sync_channel_write_feat_arr_7;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_feat_arr_8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_feat_arr_8 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_feat_arr_8 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_feat_arr_8 <= ap_sync_channel_write_feat_arr_8;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hash_arr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_hash_arr <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hash_arr <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hash_arr <= ap_sync_channel_write_hash_arr;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hash_arr_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_hash_arr_1 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hash_arr_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hash_arr_1 <= ap_sync_channel_write_hash_arr_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hash_arr_10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_hash_arr_10 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hash_arr_10 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hash_arr_10 <= ap_sync_channel_write_hash_arr_10;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hash_arr_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_hash_arr_2 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hash_arr_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hash_arr_2 <= ap_sync_channel_write_hash_arr_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hash_arr_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_hash_arr_3 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hash_arr_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hash_arr_3 <= ap_sync_channel_write_hash_arr_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hash_arr_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_hash_arr_4 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hash_arr_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hash_arr_4 <= ap_sync_channel_write_hash_arr_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hash_arr_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_hash_arr_5 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hash_arr_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hash_arr_5 <= ap_sync_channel_write_hash_arr_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hash_arr_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_hash_arr_6 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hash_arr_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hash_arr_6 <= ap_sync_channel_write_hash_arr_6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hash_arr_7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_hash_arr_7 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hash_arr_7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hash_arr_7 <= ap_sync_channel_write_hash_arr_7;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hash_arr_8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_hash_arr_8 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hash_arr_8 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hash_arr_8 <= ap_sync_channel_write_hash_arr_8;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_hash_arr_9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_hash_arr_9 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_hash_arr_9 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_hash_arr_9 <= ap_sync_channel_write_hash_arr_9;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_newret21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_newret21 <= ap_const_logic_0;
            else
                if (((sparse_input_U0_ap_done and sparse_input_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_newret21 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_newret21 <= ap_sync_channel_write_newret21;
                end if; 
            end if;
        end if;
    end process;

    Block_entry16_proc_U0_ap_continue <= feat_out_load_loc_channel_full_n;
    Block_entry16_proc_U0_ap_start <= feat_out_channel_empty_n;
    Block_entry17_proc_U0_ap_continue <= ap_const_logic_1;
    Block_entry17_proc_U0_ap_start <= feat_out_load_loc_channel_empty_n;
    ap_channel_done_feat_arr <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_feat_arr xor ap_const_logic_1));
    ap_channel_done_feat_arr_1 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_feat_arr_1 xor ap_const_logic_1));
    ap_channel_done_feat_arr_2 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_feat_arr_2 xor ap_const_logic_1));
    ap_channel_done_feat_arr_3 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_feat_arr_3 xor ap_const_logic_1));
    ap_channel_done_feat_arr_4 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_feat_arr_4 xor ap_const_logic_1));
    ap_channel_done_feat_arr_5 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_feat_arr_5 xor ap_const_logic_1));
    ap_channel_done_feat_arr_6 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_feat_arr_6 xor ap_const_logic_1));
    ap_channel_done_feat_arr_7 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_feat_arr_7 xor ap_const_logic_1));
    ap_channel_done_feat_arr_8 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_feat_arr_8 xor ap_const_logic_1));
    ap_channel_done_hash_arr <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_hash_arr xor ap_const_logic_1));
    ap_channel_done_hash_arr_1 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_hash_arr_1 xor ap_const_logic_1));
    ap_channel_done_hash_arr_10 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_hash_arr_10 xor ap_const_logic_1));
    ap_channel_done_hash_arr_2 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_hash_arr_2 xor ap_const_logic_1));
    ap_channel_done_hash_arr_3 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_hash_arr_3 xor ap_const_logic_1));
    ap_channel_done_hash_arr_4 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_hash_arr_4 xor ap_const_logic_1));
    ap_channel_done_hash_arr_5 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_hash_arr_5 xor ap_const_logic_1));
    ap_channel_done_hash_arr_6 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_hash_arr_6 xor ap_const_logic_1));
    ap_channel_done_hash_arr_7 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_hash_arr_7 xor ap_const_logic_1));
    ap_channel_done_hash_arr_8 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_hash_arr_8 xor ap_const_logic_1));
    ap_channel_done_hash_arr_9 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_hash_arr_9 xor ap_const_logic_1));
    ap_channel_done_newret21 <= (sparse_input_U0_ap_done and (ap_sync_reg_channel_write_newret21 xor ap_const_logic_1));
    ap_done <= Block_entry17_proc_U0_ap_done;
    ap_idle <= (sparse_input_U0_ap_idle and sparse_compute_U0_ap_idle and (feat_out_load_loc_channel_empty_n xor ap_const_logic_1) and (feat_out_channel_empty_n xor ap_const_logic_1) and (feat_arr_8_empty_n xor ap_const_logic_1) and (feat_arr_7_empty_n xor ap_const_logic_1) and (feat_arr_6_empty_n xor ap_const_logic_1) and (feat_arr_5_empty_n xor ap_const_logic_1) and (feat_arr_4_empty_n xor ap_const_logic_1) and (feat_arr_3_empty_n xor ap_const_logic_1) and (feat_arr_2_empty_n xor ap_const_logic_1) and (feat_arr_1_empty_n xor ap_const_logic_1) and (feat_arr_empty_n xor ap_const_logic_1) and (newret21_empty_n xor ap_const_logic_1) and (hash_arr_10_empty_n xor ap_const_logic_1) and (hash_arr_9_empty_n xor ap_const_logic_1) and (hash_arr_8_empty_n xor ap_const_logic_1) and (hash_arr_7_empty_n xor ap_const_logic_1) and (hash_arr_6_empty_n xor ap_const_logic_1) and (hash_arr_5_empty_n xor ap_const_logic_1) and (hash_arr_4_empty_n xor ap_const_logic_1) and (hash_arr_3_empty_n xor ap_const_logic_1) and (hash_arr_2_empty_n xor ap_const_logic_1) 
    and (hash_arr_1_empty_n xor ap_const_logic_1) and (hash_arr_empty_n xor ap_const_logic_1) and Block_entry17_proc_U0_ap_idle and Block_entry16_proc_U0_ap_idle);
    ap_ready <= sparse_input_U0_ap_ready;
    ap_sync_channel_write_feat_arr <= ((feat_arr_full_n and ap_channel_done_feat_arr) or ap_sync_reg_channel_write_feat_arr);
    ap_sync_channel_write_feat_arr_1 <= ((feat_arr_1_full_n and ap_channel_done_feat_arr_1) or ap_sync_reg_channel_write_feat_arr_1);
    ap_sync_channel_write_feat_arr_2 <= ((feat_arr_2_full_n and ap_channel_done_feat_arr_2) or ap_sync_reg_channel_write_feat_arr_2);
    ap_sync_channel_write_feat_arr_3 <= ((feat_arr_3_full_n and ap_channel_done_feat_arr_3) or ap_sync_reg_channel_write_feat_arr_3);
    ap_sync_channel_write_feat_arr_4 <= ((feat_arr_4_full_n and ap_channel_done_feat_arr_4) or ap_sync_reg_channel_write_feat_arr_4);
    ap_sync_channel_write_feat_arr_5 <= ((feat_arr_5_full_n and ap_channel_done_feat_arr_5) or ap_sync_reg_channel_write_feat_arr_5);
    ap_sync_channel_write_feat_arr_6 <= ((feat_arr_6_full_n and ap_channel_done_feat_arr_6) or ap_sync_reg_channel_write_feat_arr_6);
    ap_sync_channel_write_feat_arr_7 <= ((feat_arr_7_full_n and ap_channel_done_feat_arr_7) or ap_sync_reg_channel_write_feat_arr_7);
    ap_sync_channel_write_feat_arr_8 <= ((feat_arr_8_full_n and ap_channel_done_feat_arr_8) or ap_sync_reg_channel_write_feat_arr_8);
    ap_sync_channel_write_hash_arr <= ((hash_arr_full_n and ap_channel_done_hash_arr) or ap_sync_reg_channel_write_hash_arr);
    ap_sync_channel_write_hash_arr_1 <= ((hash_arr_1_full_n and ap_channel_done_hash_arr_1) or ap_sync_reg_channel_write_hash_arr_1);
    ap_sync_channel_write_hash_arr_10 <= ((hash_arr_10_full_n and ap_channel_done_hash_arr_10) or ap_sync_reg_channel_write_hash_arr_10);
    ap_sync_channel_write_hash_arr_2 <= ((hash_arr_2_full_n and ap_channel_done_hash_arr_2) or ap_sync_reg_channel_write_hash_arr_2);
    ap_sync_channel_write_hash_arr_3 <= ((hash_arr_3_full_n and ap_channel_done_hash_arr_3) or ap_sync_reg_channel_write_hash_arr_3);
    ap_sync_channel_write_hash_arr_4 <= ((hash_arr_4_full_n and ap_channel_done_hash_arr_4) or ap_sync_reg_channel_write_hash_arr_4);
    ap_sync_channel_write_hash_arr_5 <= ((hash_arr_5_full_n and ap_channel_done_hash_arr_5) or ap_sync_reg_channel_write_hash_arr_5);
    ap_sync_channel_write_hash_arr_6 <= ((hash_arr_6_full_n and ap_channel_done_hash_arr_6) or ap_sync_reg_channel_write_hash_arr_6);
    ap_sync_channel_write_hash_arr_7 <= ((hash_arr_7_full_n and ap_channel_done_hash_arr_7) or ap_sync_reg_channel_write_hash_arr_7);
    ap_sync_channel_write_hash_arr_8 <= ((hash_arr_8_full_n and ap_channel_done_hash_arr_8) or ap_sync_reg_channel_write_hash_arr_8);
    ap_sync_channel_write_hash_arr_9 <= ((hash_arr_9_full_n and ap_channel_done_hash_arr_9) or ap_sync_reg_channel_write_hash_arr_9);
    ap_sync_channel_write_newret21 <= ((newret21_full_n and ap_channel_done_newret21) or ap_sync_reg_channel_write_newret21);
    layer2_out_0 <= Block_entry17_proc_U0_layer2_out_0;
    layer2_out_0_ap_vld <= Block_entry17_proc_U0_layer2_out_0_ap_vld;
    sparse_compute_U0_ap_continue <= feat_out_channel_full_n;
    sparse_compute_U0_ap_start <= (newret21_empty_n and hash_arr_empty_n and hash_arr_9_empty_n and hash_arr_8_empty_n and hash_arr_7_empty_n and hash_arr_6_empty_n and hash_arr_5_empty_n and hash_arr_4_empty_n and hash_arr_3_empty_n and hash_arr_2_empty_n and hash_arr_1_empty_n and hash_arr_10_empty_n and feat_arr_empty_n and feat_arr_8_empty_n and feat_arr_7_empty_n and feat_arr_6_empty_n and feat_arr_5_empty_n and feat_arr_4_empty_n and feat_arr_3_empty_n and feat_arr_2_empty_n and feat_arr_1_empty_n);
    sparse_input_U0_ap_continue <= (ap_sync_channel_write_newret21 and ap_sync_channel_write_hash_arr_9 and ap_sync_channel_write_hash_arr_8 and ap_sync_channel_write_hash_arr_7 and ap_sync_channel_write_hash_arr_6 and ap_sync_channel_write_hash_arr_5 and ap_sync_channel_write_hash_arr_4 and ap_sync_channel_write_hash_arr_3 and ap_sync_channel_write_hash_arr_2 and ap_sync_channel_write_hash_arr_10 and ap_sync_channel_write_hash_arr_1 and ap_sync_channel_write_hash_arr and ap_sync_channel_write_feat_arr_8 and ap_sync_channel_write_feat_arr_7 and ap_sync_channel_write_feat_arr_6 and ap_sync_channel_write_feat_arr_5 and ap_sync_channel_write_feat_arr_4 and ap_sync_channel_write_feat_arr_3 and ap_sync_channel_write_feat_arr_2 and ap_sync_channel_write_feat_arr_1 and ap_sync_channel_write_feat_arr);
    sparse_input_U0_ap_start <= ap_start;
end behav;
