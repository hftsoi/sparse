// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="model_test_model_test,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu13p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.186562,HLS_SYN_LAT=7,HLS_SYN_TPT=7,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1098,HLS_SYN_LUT=3223,HLS_VERSION=2023_1}" *)

module model_test (
        x_in,
        layer2_out_0,
        layer2_out_1,
        layer2_out_2,
        layer2_out_3,
        layer2_out_4,
        layer2_out_5,
        layer2_out_6,
        layer2_out_7,
        layer2_out_8,
        layer2_out_9,
        ap_clk,
        ap_rst,
        x_in_ap_vld,
        ap_start,
        layer2_out_0_ap_vld,
        ap_done,
        ap_ready,
        ap_idle
);


input  [1199:0] x_in;
output  [24:0] layer2_out_0;
input  [24:0] layer2_out_1;
input  [24:0] layer2_out_2;
input  [24:0] layer2_out_3;
input  [24:0] layer2_out_4;
input  [24:0] layer2_out_5;
input  [24:0] layer2_out_6;
input  [24:0] layer2_out_7;
input  [24:0] layer2_out_8;
input  [24:0] layer2_out_9;
input   ap_clk;
input   ap_rst;
input   x_in_ap_vld;
input   ap_start;
output   layer2_out_0_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    sparse_input_U0_ap_start;
wire    sparse_input_U0_ap_done;
wire    sparse_input_U0_ap_continue;
wire    sparse_input_U0_ap_idle;
wire    sparse_input_U0_ap_ready;
wire   [1:0] sparse_input_U0_ap_return_0;
wire   [1:0] sparse_input_U0_ap_return_1;
wire   [2:0] sparse_input_U0_ap_return_2;
wire   [2:0] sparse_input_U0_ap_return_3;
wire   [2:0] sparse_input_U0_ap_return_4;
wire   [1:0] sparse_input_U0_ap_return_5;
wire   [3:0] sparse_input_U0_ap_return_6;
wire   [3:0] sparse_input_U0_ap_return_7;
wire   [3:0] sparse_input_U0_ap_return_8;
wire   [1:0] sparse_input_U0_ap_return_9;
wire   [3:0] sparse_input_U0_ap_return_10;
wire   [11:0] sparse_input_U0_ap_return_11;
wire   [11:0] sparse_input_U0_ap_return_12;
wire   [11:0] sparse_input_U0_ap_return_13;
wire   [11:0] sparse_input_U0_ap_return_14;
wire   [11:0] sparse_input_U0_ap_return_15;
wire   [11:0] sparse_input_U0_ap_return_16;
wire   [11:0] sparse_input_U0_ap_return_17;
wire   [11:0] sparse_input_U0_ap_return_18;
wire   [11:0] sparse_input_U0_ap_return_19;
wire   [11:0] sparse_input_U0_ap_return_20;
wire    ap_channel_done_feat_arr_8;
wire    feat_arr_8_full_n;
reg    ap_sync_reg_channel_write_feat_arr_8;
wire    ap_sync_channel_write_feat_arr_8;
wire    ap_channel_done_feat_arr_7;
wire    feat_arr_7_full_n;
reg    ap_sync_reg_channel_write_feat_arr_7;
wire    ap_sync_channel_write_feat_arr_7;
wire    ap_channel_done_feat_arr_6;
wire    feat_arr_6_full_n;
reg    ap_sync_reg_channel_write_feat_arr_6;
wire    ap_sync_channel_write_feat_arr_6;
wire    ap_channel_done_feat_arr_5;
wire    feat_arr_5_full_n;
reg    ap_sync_reg_channel_write_feat_arr_5;
wire    ap_sync_channel_write_feat_arr_5;
wire    ap_channel_done_feat_arr_4;
wire    feat_arr_4_full_n;
reg    ap_sync_reg_channel_write_feat_arr_4;
wire    ap_sync_channel_write_feat_arr_4;
wire    ap_channel_done_feat_arr_3;
wire    feat_arr_3_full_n;
reg    ap_sync_reg_channel_write_feat_arr_3;
wire    ap_sync_channel_write_feat_arr_3;
wire    ap_channel_done_feat_arr_2;
wire    feat_arr_2_full_n;
reg    ap_sync_reg_channel_write_feat_arr_2;
wire    ap_sync_channel_write_feat_arr_2;
wire    ap_channel_done_feat_arr_1;
wire    feat_arr_1_full_n;
reg    ap_sync_reg_channel_write_feat_arr_1;
wire    ap_sync_channel_write_feat_arr_1;
wire    ap_channel_done_feat_arr;
wire    feat_arr_full_n;
reg    ap_sync_reg_channel_write_feat_arr;
wire    ap_sync_channel_write_feat_arr;
wire    ap_channel_done_newret21;
wire    newret21_full_n;
reg    ap_sync_reg_channel_write_newret21;
wire    ap_sync_channel_write_newret21;
wire    ap_channel_done_hash_arr_10;
wire    hash_arr_10_full_n;
reg    ap_sync_reg_channel_write_hash_arr_10;
wire    ap_sync_channel_write_hash_arr_10;
wire    ap_channel_done_hash_arr_9;
wire    hash_arr_9_full_n;
reg    ap_sync_reg_channel_write_hash_arr_9;
wire    ap_sync_channel_write_hash_arr_9;
wire    ap_channel_done_hash_arr_8;
wire    hash_arr_8_full_n;
reg    ap_sync_reg_channel_write_hash_arr_8;
wire    ap_sync_channel_write_hash_arr_8;
wire    ap_channel_done_hash_arr_7;
wire    hash_arr_7_full_n;
reg    ap_sync_reg_channel_write_hash_arr_7;
wire    ap_sync_channel_write_hash_arr_7;
wire    ap_channel_done_hash_arr_6;
wire    hash_arr_6_full_n;
reg    ap_sync_reg_channel_write_hash_arr_6;
wire    ap_sync_channel_write_hash_arr_6;
wire    ap_channel_done_hash_arr_5;
wire    hash_arr_5_full_n;
reg    ap_sync_reg_channel_write_hash_arr_5;
wire    ap_sync_channel_write_hash_arr_5;
wire    ap_channel_done_hash_arr_4;
wire    hash_arr_4_full_n;
reg    ap_sync_reg_channel_write_hash_arr_4;
wire    ap_sync_channel_write_hash_arr_4;
wire    ap_channel_done_hash_arr_3;
wire    hash_arr_3_full_n;
reg    ap_sync_reg_channel_write_hash_arr_3;
wire    ap_sync_channel_write_hash_arr_3;
wire    ap_channel_done_hash_arr_2;
wire    hash_arr_2_full_n;
reg    ap_sync_reg_channel_write_hash_arr_2;
wire    ap_sync_channel_write_hash_arr_2;
wire    ap_channel_done_hash_arr_1;
wire    hash_arr_1_full_n;
reg    ap_sync_reg_channel_write_hash_arr_1;
wire    ap_sync_channel_write_hash_arr_1;
wire    ap_channel_done_hash_arr;
wire    hash_arr_full_n;
reg    ap_sync_reg_channel_write_hash_arr;
wire    ap_sync_channel_write_hash_arr;
wire    sparse_compute_U0_ap_start;
wire    sparse_compute_U0_ap_done;
wire    sparse_compute_U0_ap_continue;
wire    sparse_compute_U0_ap_idle;
wire    sparse_compute_U0_ap_ready;
wire   [20:0] sparse_compute_U0_ap_return;
wire    feat_out_channel_full_n;
wire    Block_entry16_proc_U0_ap_start;
wire    Block_entry16_proc_U0_ap_done;
wire    Block_entry16_proc_U0_ap_continue;
wire    Block_entry16_proc_U0_ap_idle;
wire    Block_entry16_proc_U0_ap_ready;
wire   [20:0] Block_entry16_proc_U0_ap_return;
wire    feat_out_load_loc_channel_full_n;
wire    Block_entry17_proc_U0_ap_start;
wire    Block_entry17_proc_U0_ap_done;
wire    Block_entry17_proc_U0_ap_continue;
wire    Block_entry17_proc_U0_ap_idle;
wire    Block_entry17_proc_U0_ap_ready;
wire   [24:0] Block_entry17_proc_U0_layer2_out_0;
wire    Block_entry17_proc_U0_layer2_out_0_ap_vld;
wire   [1:0] hash_arr_dout;
wire   [1:0] hash_arr_num_data_valid;
wire   [1:0] hash_arr_fifo_cap;
wire    hash_arr_empty_n;
wire   [1:0] hash_arr_1_dout;
wire   [1:0] hash_arr_1_num_data_valid;
wire   [1:0] hash_arr_1_fifo_cap;
wire    hash_arr_1_empty_n;
wire   [2:0] hash_arr_2_dout;
wire   [1:0] hash_arr_2_num_data_valid;
wire   [1:0] hash_arr_2_fifo_cap;
wire    hash_arr_2_empty_n;
wire   [2:0] hash_arr_3_dout;
wire   [1:0] hash_arr_3_num_data_valid;
wire   [1:0] hash_arr_3_fifo_cap;
wire    hash_arr_3_empty_n;
wire   [2:0] hash_arr_4_dout;
wire   [1:0] hash_arr_4_num_data_valid;
wire   [1:0] hash_arr_4_fifo_cap;
wire    hash_arr_4_empty_n;
wire   [1:0] hash_arr_5_dout;
wire   [1:0] hash_arr_5_num_data_valid;
wire   [1:0] hash_arr_5_fifo_cap;
wire    hash_arr_5_empty_n;
wire   [3:0] hash_arr_6_dout;
wire   [1:0] hash_arr_6_num_data_valid;
wire   [1:0] hash_arr_6_fifo_cap;
wire    hash_arr_6_empty_n;
wire   [3:0] hash_arr_7_dout;
wire   [1:0] hash_arr_7_num_data_valid;
wire   [1:0] hash_arr_7_fifo_cap;
wire    hash_arr_7_empty_n;
wire   [3:0] hash_arr_8_dout;
wire   [1:0] hash_arr_8_num_data_valid;
wire   [1:0] hash_arr_8_fifo_cap;
wire    hash_arr_8_empty_n;
wire   [1:0] hash_arr_9_dout;
wire   [1:0] hash_arr_9_num_data_valid;
wire   [1:0] hash_arr_9_fifo_cap;
wire    hash_arr_9_empty_n;
wire   [3:0] hash_arr_10_dout;
wire   [1:0] hash_arr_10_num_data_valid;
wire   [1:0] hash_arr_10_fifo_cap;
wire    hash_arr_10_empty_n;
wire   [11:0] newret21_dout;
wire   [1:0] newret21_num_data_valid;
wire   [1:0] newret21_fifo_cap;
wire    newret21_empty_n;
wire   [11:0] feat_arr_dout;
wire   [1:0] feat_arr_num_data_valid;
wire   [1:0] feat_arr_fifo_cap;
wire    feat_arr_empty_n;
wire   [11:0] feat_arr_1_dout;
wire   [1:0] feat_arr_1_num_data_valid;
wire   [1:0] feat_arr_1_fifo_cap;
wire    feat_arr_1_empty_n;
wire   [11:0] feat_arr_2_dout;
wire   [1:0] feat_arr_2_num_data_valid;
wire   [1:0] feat_arr_2_fifo_cap;
wire    feat_arr_2_empty_n;
wire   [11:0] feat_arr_3_dout;
wire   [1:0] feat_arr_3_num_data_valid;
wire   [1:0] feat_arr_3_fifo_cap;
wire    feat_arr_3_empty_n;
wire   [11:0] feat_arr_4_dout;
wire   [1:0] feat_arr_4_num_data_valid;
wire   [1:0] feat_arr_4_fifo_cap;
wire    feat_arr_4_empty_n;
wire   [11:0] feat_arr_5_dout;
wire   [1:0] feat_arr_5_num_data_valid;
wire   [1:0] feat_arr_5_fifo_cap;
wire    feat_arr_5_empty_n;
wire   [11:0] feat_arr_6_dout;
wire   [1:0] feat_arr_6_num_data_valid;
wire   [1:0] feat_arr_6_fifo_cap;
wire    feat_arr_6_empty_n;
wire   [11:0] feat_arr_7_dout;
wire   [1:0] feat_arr_7_num_data_valid;
wire   [1:0] feat_arr_7_fifo_cap;
wire    feat_arr_7_empty_n;
wire   [11:0] feat_arr_8_dout;
wire   [1:0] feat_arr_8_num_data_valid;
wire   [1:0] feat_arr_8_fifo_cap;
wire    feat_arr_8_empty_n;
wire   [20:0] feat_out_channel_dout;
wire   [1:0] feat_out_channel_num_data_valid;
wire   [1:0] feat_out_channel_fifo_cap;
wire    feat_out_channel_empty_n;
wire   [20:0] feat_out_load_loc_channel_dout;
wire   [1:0] feat_out_load_loc_channel_num_data_valid;
wire   [1:0] feat_out_load_loc_channel_fifo_cap;
wire    feat_out_load_loc_channel_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_feat_arr_8 = 1'b0;
#0 ap_sync_reg_channel_write_feat_arr_7 = 1'b0;
#0 ap_sync_reg_channel_write_feat_arr_6 = 1'b0;
#0 ap_sync_reg_channel_write_feat_arr_5 = 1'b0;
#0 ap_sync_reg_channel_write_feat_arr_4 = 1'b0;
#0 ap_sync_reg_channel_write_feat_arr_3 = 1'b0;
#0 ap_sync_reg_channel_write_feat_arr_2 = 1'b0;
#0 ap_sync_reg_channel_write_feat_arr_1 = 1'b0;
#0 ap_sync_reg_channel_write_feat_arr = 1'b0;
#0 ap_sync_reg_channel_write_newret21 = 1'b0;
#0 ap_sync_reg_channel_write_hash_arr_10 = 1'b0;
#0 ap_sync_reg_channel_write_hash_arr_9 = 1'b0;
#0 ap_sync_reg_channel_write_hash_arr_8 = 1'b0;
#0 ap_sync_reg_channel_write_hash_arr_7 = 1'b0;
#0 ap_sync_reg_channel_write_hash_arr_6 = 1'b0;
#0 ap_sync_reg_channel_write_hash_arr_5 = 1'b0;
#0 ap_sync_reg_channel_write_hash_arr_4 = 1'b0;
#0 ap_sync_reg_channel_write_hash_arr_3 = 1'b0;
#0 ap_sync_reg_channel_write_hash_arr_2 = 1'b0;
#0 ap_sync_reg_channel_write_hash_arr_1 = 1'b0;
#0 ap_sync_reg_channel_write_hash_arr = 1'b0;
end

model_test_sparse_input sparse_input_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(sparse_input_U0_ap_start),
    .ap_done(sparse_input_U0_ap_done),
    .ap_continue(sparse_input_U0_ap_continue),
    .ap_idle(sparse_input_U0_ap_idle),
    .ap_ready(sparse_input_U0_ap_ready),
    .x_in(x_in),
    .x_in_ap_vld(x_in_ap_vld),
    .ap_return_0(sparse_input_U0_ap_return_0),
    .ap_return_1(sparse_input_U0_ap_return_1),
    .ap_return_2(sparse_input_U0_ap_return_2),
    .ap_return_3(sparse_input_U0_ap_return_3),
    .ap_return_4(sparse_input_U0_ap_return_4),
    .ap_return_5(sparse_input_U0_ap_return_5),
    .ap_return_6(sparse_input_U0_ap_return_6),
    .ap_return_7(sparse_input_U0_ap_return_7),
    .ap_return_8(sparse_input_U0_ap_return_8),
    .ap_return_9(sparse_input_U0_ap_return_9),
    .ap_return_10(sparse_input_U0_ap_return_10),
    .ap_return_11(sparse_input_U0_ap_return_11),
    .ap_return_12(sparse_input_U0_ap_return_12),
    .ap_return_13(sparse_input_U0_ap_return_13),
    .ap_return_14(sparse_input_U0_ap_return_14),
    .ap_return_15(sparse_input_U0_ap_return_15),
    .ap_return_16(sparse_input_U0_ap_return_16),
    .ap_return_17(sparse_input_U0_ap_return_17),
    .ap_return_18(sparse_input_U0_ap_return_18),
    .ap_return_19(sparse_input_U0_ap_return_19),
    .ap_return_20(sparse_input_U0_ap_return_20)
);

model_test_sparse_compute sparse_compute_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(sparse_compute_U0_ap_start),
    .ap_done(sparse_compute_U0_ap_done),
    .ap_continue(sparse_compute_U0_ap_continue),
    .ap_idle(sparse_compute_U0_ap_idle),
    .ap_ready(sparse_compute_U0_ap_ready),
    .p_read1(hash_arr_dout),
    .p_read3(hash_arr_1_dout),
    .p_read5(hash_arr_2_dout),
    .p_read7(hash_arr_3_dout),
    .p_read9(hash_arr_4_dout),
    .p_read11(hash_arr_5_dout),
    .p_read13(hash_arr_6_dout),
    .p_read15(hash_arr_7_dout),
    .p_read17(hash_arr_8_dout),
    .p_read18(hash_arr_9_dout),
    .p_read19(hash_arr_10_dout),
    .p_read20(newret21_dout),
    .p_read21(feat_arr_dout),
    .p_read22(feat_arr_1_dout),
    .p_read23(feat_arr_2_dout),
    .p_read24(feat_arr_3_dout),
    .p_read25(feat_arr_4_dout),
    .p_read26(feat_arr_5_dout),
    .p_read27(feat_arr_6_dout),
    .p_read28(feat_arr_7_dout),
    .p_read29(feat_arr_8_dout),
    .ap_return(sparse_compute_U0_ap_return)
);

model_test_Block_entry16_proc Block_entry16_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry16_proc_U0_ap_start),
    .ap_done(Block_entry16_proc_U0_ap_done),
    .ap_continue(Block_entry16_proc_U0_ap_continue),
    .ap_idle(Block_entry16_proc_U0_ap_idle),
    .ap_ready(Block_entry16_proc_U0_ap_ready),
    .p_read(feat_out_channel_dout),
    .ap_return(Block_entry16_proc_U0_ap_return)
);

model_test_Block_entry17_proc Block_entry17_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry17_proc_U0_ap_start),
    .ap_done(Block_entry17_proc_U0_ap_done),
    .ap_continue(Block_entry17_proc_U0_ap_continue),
    .ap_idle(Block_entry17_proc_U0_ap_idle),
    .ap_ready(Block_entry17_proc_U0_ap_ready),
    .p_read9(feat_out_load_loc_channel_dout),
    .layer2_out_0(Block_entry17_proc_U0_layer2_out_0),
    .layer2_out_0_ap_vld(Block_entry17_proc_U0_layer2_out_0_ap_vld)
);

model_test_fifo_w2_d2_S hash_arr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_0),
    .if_full_n(hash_arr_full_n),
    .if_write(ap_channel_done_hash_arr),
    .if_dout(hash_arr_dout),
    .if_num_data_valid(hash_arr_num_data_valid),
    .if_fifo_cap(hash_arr_fifo_cap),
    .if_empty_n(hash_arr_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w2_d2_S hash_arr_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_1),
    .if_full_n(hash_arr_1_full_n),
    .if_write(ap_channel_done_hash_arr_1),
    .if_dout(hash_arr_1_dout),
    .if_num_data_valid(hash_arr_1_num_data_valid),
    .if_fifo_cap(hash_arr_1_fifo_cap),
    .if_empty_n(hash_arr_1_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w3_d2_S hash_arr_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_2),
    .if_full_n(hash_arr_2_full_n),
    .if_write(ap_channel_done_hash_arr_2),
    .if_dout(hash_arr_2_dout),
    .if_num_data_valid(hash_arr_2_num_data_valid),
    .if_fifo_cap(hash_arr_2_fifo_cap),
    .if_empty_n(hash_arr_2_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w3_d2_S hash_arr_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_3),
    .if_full_n(hash_arr_3_full_n),
    .if_write(ap_channel_done_hash_arr_3),
    .if_dout(hash_arr_3_dout),
    .if_num_data_valid(hash_arr_3_num_data_valid),
    .if_fifo_cap(hash_arr_3_fifo_cap),
    .if_empty_n(hash_arr_3_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w3_d2_S hash_arr_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_4),
    .if_full_n(hash_arr_4_full_n),
    .if_write(ap_channel_done_hash_arr_4),
    .if_dout(hash_arr_4_dout),
    .if_num_data_valid(hash_arr_4_num_data_valid),
    .if_fifo_cap(hash_arr_4_fifo_cap),
    .if_empty_n(hash_arr_4_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w2_d2_S hash_arr_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_5),
    .if_full_n(hash_arr_5_full_n),
    .if_write(ap_channel_done_hash_arr_5),
    .if_dout(hash_arr_5_dout),
    .if_num_data_valid(hash_arr_5_num_data_valid),
    .if_fifo_cap(hash_arr_5_fifo_cap),
    .if_empty_n(hash_arr_5_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w4_d2_S hash_arr_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_6),
    .if_full_n(hash_arr_6_full_n),
    .if_write(ap_channel_done_hash_arr_6),
    .if_dout(hash_arr_6_dout),
    .if_num_data_valid(hash_arr_6_num_data_valid),
    .if_fifo_cap(hash_arr_6_fifo_cap),
    .if_empty_n(hash_arr_6_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w4_d2_S hash_arr_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_7),
    .if_full_n(hash_arr_7_full_n),
    .if_write(ap_channel_done_hash_arr_7),
    .if_dout(hash_arr_7_dout),
    .if_num_data_valid(hash_arr_7_num_data_valid),
    .if_fifo_cap(hash_arr_7_fifo_cap),
    .if_empty_n(hash_arr_7_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w4_d2_S hash_arr_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_8),
    .if_full_n(hash_arr_8_full_n),
    .if_write(ap_channel_done_hash_arr_8),
    .if_dout(hash_arr_8_dout),
    .if_num_data_valid(hash_arr_8_num_data_valid),
    .if_fifo_cap(hash_arr_8_fifo_cap),
    .if_empty_n(hash_arr_8_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w2_d2_S hash_arr_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_9),
    .if_full_n(hash_arr_9_full_n),
    .if_write(ap_channel_done_hash_arr_9),
    .if_dout(hash_arr_9_dout),
    .if_num_data_valid(hash_arr_9_num_data_valid),
    .if_fifo_cap(hash_arr_9_fifo_cap),
    .if_empty_n(hash_arr_9_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w4_d2_S hash_arr_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_10),
    .if_full_n(hash_arr_10_full_n),
    .if_write(ap_channel_done_hash_arr_10),
    .if_dout(hash_arr_10_dout),
    .if_num_data_valid(hash_arr_10_num_data_valid),
    .if_fifo_cap(hash_arr_10_fifo_cap),
    .if_empty_n(hash_arr_10_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w12_d2_S newret21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_11),
    .if_full_n(newret21_full_n),
    .if_write(ap_channel_done_newret21),
    .if_dout(newret21_dout),
    .if_num_data_valid(newret21_num_data_valid),
    .if_fifo_cap(newret21_fifo_cap),
    .if_empty_n(newret21_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w12_d2_S feat_arr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_12),
    .if_full_n(feat_arr_full_n),
    .if_write(ap_channel_done_feat_arr),
    .if_dout(feat_arr_dout),
    .if_num_data_valid(feat_arr_num_data_valid),
    .if_fifo_cap(feat_arr_fifo_cap),
    .if_empty_n(feat_arr_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w12_d2_S feat_arr_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_13),
    .if_full_n(feat_arr_1_full_n),
    .if_write(ap_channel_done_feat_arr_1),
    .if_dout(feat_arr_1_dout),
    .if_num_data_valid(feat_arr_1_num_data_valid),
    .if_fifo_cap(feat_arr_1_fifo_cap),
    .if_empty_n(feat_arr_1_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w12_d2_S feat_arr_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_14),
    .if_full_n(feat_arr_2_full_n),
    .if_write(ap_channel_done_feat_arr_2),
    .if_dout(feat_arr_2_dout),
    .if_num_data_valid(feat_arr_2_num_data_valid),
    .if_fifo_cap(feat_arr_2_fifo_cap),
    .if_empty_n(feat_arr_2_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w12_d2_S feat_arr_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_15),
    .if_full_n(feat_arr_3_full_n),
    .if_write(ap_channel_done_feat_arr_3),
    .if_dout(feat_arr_3_dout),
    .if_num_data_valid(feat_arr_3_num_data_valid),
    .if_fifo_cap(feat_arr_3_fifo_cap),
    .if_empty_n(feat_arr_3_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w12_d2_S feat_arr_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_16),
    .if_full_n(feat_arr_4_full_n),
    .if_write(ap_channel_done_feat_arr_4),
    .if_dout(feat_arr_4_dout),
    .if_num_data_valid(feat_arr_4_num_data_valid),
    .if_fifo_cap(feat_arr_4_fifo_cap),
    .if_empty_n(feat_arr_4_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w12_d2_S feat_arr_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_17),
    .if_full_n(feat_arr_5_full_n),
    .if_write(ap_channel_done_feat_arr_5),
    .if_dout(feat_arr_5_dout),
    .if_num_data_valid(feat_arr_5_num_data_valid),
    .if_fifo_cap(feat_arr_5_fifo_cap),
    .if_empty_n(feat_arr_5_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w12_d2_S feat_arr_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_18),
    .if_full_n(feat_arr_6_full_n),
    .if_write(ap_channel_done_feat_arr_6),
    .if_dout(feat_arr_6_dout),
    .if_num_data_valid(feat_arr_6_num_data_valid),
    .if_fifo_cap(feat_arr_6_fifo_cap),
    .if_empty_n(feat_arr_6_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w12_d2_S feat_arr_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_19),
    .if_full_n(feat_arr_7_full_n),
    .if_write(ap_channel_done_feat_arr_7),
    .if_dout(feat_arr_7_dout),
    .if_num_data_valid(feat_arr_7_num_data_valid),
    .if_fifo_cap(feat_arr_7_fifo_cap),
    .if_empty_n(feat_arr_7_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w12_d2_S feat_arr_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_input_U0_ap_return_20),
    .if_full_n(feat_arr_8_full_n),
    .if_write(ap_channel_done_feat_arr_8),
    .if_dout(feat_arr_8_dout),
    .if_num_data_valid(feat_arr_8_num_data_valid),
    .if_fifo_cap(feat_arr_8_fifo_cap),
    .if_empty_n(feat_arr_8_empty_n),
    .if_read(sparse_compute_U0_ap_ready)
);

model_test_fifo_w21_d2_S feat_out_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sparse_compute_U0_ap_return),
    .if_full_n(feat_out_channel_full_n),
    .if_write(sparse_compute_U0_ap_done),
    .if_dout(feat_out_channel_dout),
    .if_num_data_valid(feat_out_channel_num_data_valid),
    .if_fifo_cap(feat_out_channel_fifo_cap),
    .if_empty_n(feat_out_channel_empty_n),
    .if_read(Block_entry16_proc_U0_ap_ready)
);

model_test_fifo_w21_d2_S feat_out_load_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry16_proc_U0_ap_return),
    .if_full_n(feat_out_load_loc_channel_full_n),
    .if_write(Block_entry16_proc_U0_ap_done),
    .if_dout(feat_out_load_loc_channel_dout),
    .if_num_data_valid(feat_out_load_loc_channel_num_data_valid),
    .if_fifo_cap(feat_out_load_loc_channel_fifo_cap),
    .if_empty_n(feat_out_load_loc_channel_empty_n),
    .if_read(Block_entry17_proc_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_feat_arr <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_feat_arr <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_feat_arr <= ap_sync_channel_write_feat_arr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_feat_arr_1 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_feat_arr_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_feat_arr_1 <= ap_sync_channel_write_feat_arr_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_feat_arr_2 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_feat_arr_2 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_feat_arr_2 <= ap_sync_channel_write_feat_arr_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_feat_arr_3 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_feat_arr_3 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_feat_arr_3 <= ap_sync_channel_write_feat_arr_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_feat_arr_4 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_feat_arr_4 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_feat_arr_4 <= ap_sync_channel_write_feat_arr_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_feat_arr_5 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_feat_arr_5 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_feat_arr_5 <= ap_sync_channel_write_feat_arr_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_feat_arr_6 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_feat_arr_6 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_feat_arr_6 <= ap_sync_channel_write_feat_arr_6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_feat_arr_7 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_feat_arr_7 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_feat_arr_7 <= ap_sync_channel_write_feat_arr_7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_feat_arr_8 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_feat_arr_8 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_feat_arr_8 <= ap_sync_channel_write_feat_arr_8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_hash_arr <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_hash_arr <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_hash_arr <= ap_sync_channel_write_hash_arr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_hash_arr_1 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_hash_arr_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_hash_arr_1 <= ap_sync_channel_write_hash_arr_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_hash_arr_10 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_hash_arr_10 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_hash_arr_10 <= ap_sync_channel_write_hash_arr_10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_hash_arr_2 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_hash_arr_2 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_hash_arr_2 <= ap_sync_channel_write_hash_arr_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_hash_arr_3 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_hash_arr_3 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_hash_arr_3 <= ap_sync_channel_write_hash_arr_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_hash_arr_4 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_hash_arr_4 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_hash_arr_4 <= ap_sync_channel_write_hash_arr_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_hash_arr_5 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_hash_arr_5 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_hash_arr_5 <= ap_sync_channel_write_hash_arr_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_hash_arr_6 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_hash_arr_6 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_hash_arr_6 <= ap_sync_channel_write_hash_arr_6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_hash_arr_7 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_hash_arr_7 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_hash_arr_7 <= ap_sync_channel_write_hash_arr_7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_hash_arr_8 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_hash_arr_8 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_hash_arr_8 <= ap_sync_channel_write_hash_arr_8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_hash_arr_9 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_hash_arr_9 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_hash_arr_9 <= ap_sync_channel_write_hash_arr_9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_newret21 <= 1'b0;
    end else begin
        if (((sparse_input_U0_ap_done & sparse_input_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_newret21 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_newret21 <= ap_sync_channel_write_newret21;
        end
    end
end

assign Block_entry16_proc_U0_ap_continue = feat_out_load_loc_channel_full_n;

assign Block_entry16_proc_U0_ap_start = feat_out_channel_empty_n;

assign Block_entry17_proc_U0_ap_continue = 1'b1;

assign Block_entry17_proc_U0_ap_start = feat_out_load_loc_channel_empty_n;

assign ap_channel_done_feat_arr = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_feat_arr ^ 1'b1));

assign ap_channel_done_feat_arr_1 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_feat_arr_1 ^ 1'b1));

assign ap_channel_done_feat_arr_2 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_feat_arr_2 ^ 1'b1));

assign ap_channel_done_feat_arr_3 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_feat_arr_3 ^ 1'b1));

assign ap_channel_done_feat_arr_4 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_feat_arr_4 ^ 1'b1));

assign ap_channel_done_feat_arr_5 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_feat_arr_5 ^ 1'b1));

assign ap_channel_done_feat_arr_6 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_feat_arr_6 ^ 1'b1));

assign ap_channel_done_feat_arr_7 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_feat_arr_7 ^ 1'b1));

assign ap_channel_done_feat_arr_8 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_feat_arr_8 ^ 1'b1));

assign ap_channel_done_hash_arr = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_hash_arr ^ 1'b1));

assign ap_channel_done_hash_arr_1 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_hash_arr_1 ^ 1'b1));

assign ap_channel_done_hash_arr_10 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_hash_arr_10 ^ 1'b1));

assign ap_channel_done_hash_arr_2 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_hash_arr_2 ^ 1'b1));

assign ap_channel_done_hash_arr_3 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_hash_arr_3 ^ 1'b1));

assign ap_channel_done_hash_arr_4 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_hash_arr_4 ^ 1'b1));

assign ap_channel_done_hash_arr_5 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_hash_arr_5 ^ 1'b1));

assign ap_channel_done_hash_arr_6 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_hash_arr_6 ^ 1'b1));

assign ap_channel_done_hash_arr_7 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_hash_arr_7 ^ 1'b1));

assign ap_channel_done_hash_arr_8 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_hash_arr_8 ^ 1'b1));

assign ap_channel_done_hash_arr_9 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_hash_arr_9 ^ 1'b1));

assign ap_channel_done_newret21 = (sparse_input_U0_ap_done & (ap_sync_reg_channel_write_newret21 ^ 1'b1));

assign ap_done = Block_entry17_proc_U0_ap_done;

assign ap_idle = (sparse_input_U0_ap_idle & sparse_compute_U0_ap_idle & (feat_out_load_loc_channel_empty_n ^ 1'b1) & (feat_out_channel_empty_n ^ 1'b1) & (feat_arr_8_empty_n ^ 1'b1) & (feat_arr_7_empty_n ^ 1'b1) & (feat_arr_6_empty_n ^ 1'b1) & (feat_arr_5_empty_n ^ 1'b1) & (feat_arr_4_empty_n ^ 1'b1) & (feat_arr_3_empty_n ^ 1'b1) & (feat_arr_2_empty_n ^ 1'b1) & (feat_arr_1_empty_n ^ 1'b1) & (feat_arr_empty_n ^ 1'b1) & (newret21_empty_n ^ 1'b1) & (hash_arr_10_empty_n ^ 1'b1) & (hash_arr_9_empty_n ^ 1'b1) & (hash_arr_8_empty_n ^ 1'b1) & (hash_arr_7_empty_n ^ 1'b1) & (hash_arr_6_empty_n ^ 1'b1) & (hash_arr_5_empty_n ^ 1'b1) & (hash_arr_4_empty_n ^ 1'b1) & (hash_arr_3_empty_n ^ 1'b1) & (hash_arr_2_empty_n ^ 1'b1) & (hash_arr_1_empty_n ^ 1'b1) & (hash_arr_empty_n ^ 1'b1) & Block_entry17_proc_U0_ap_idle & Block_entry16_proc_U0_ap_idle);

assign ap_ready = sparse_input_U0_ap_ready;

assign ap_sync_channel_write_feat_arr = ((feat_arr_full_n & ap_channel_done_feat_arr) | ap_sync_reg_channel_write_feat_arr);

assign ap_sync_channel_write_feat_arr_1 = ((feat_arr_1_full_n & ap_channel_done_feat_arr_1) | ap_sync_reg_channel_write_feat_arr_1);

assign ap_sync_channel_write_feat_arr_2 = ((feat_arr_2_full_n & ap_channel_done_feat_arr_2) | ap_sync_reg_channel_write_feat_arr_2);

assign ap_sync_channel_write_feat_arr_3 = ((feat_arr_3_full_n & ap_channel_done_feat_arr_3) | ap_sync_reg_channel_write_feat_arr_3);

assign ap_sync_channel_write_feat_arr_4 = ((feat_arr_4_full_n & ap_channel_done_feat_arr_4) | ap_sync_reg_channel_write_feat_arr_4);

assign ap_sync_channel_write_feat_arr_5 = ((feat_arr_5_full_n & ap_channel_done_feat_arr_5) | ap_sync_reg_channel_write_feat_arr_5);

assign ap_sync_channel_write_feat_arr_6 = ((feat_arr_6_full_n & ap_channel_done_feat_arr_6) | ap_sync_reg_channel_write_feat_arr_6);

assign ap_sync_channel_write_feat_arr_7 = ((feat_arr_7_full_n & ap_channel_done_feat_arr_7) | ap_sync_reg_channel_write_feat_arr_7);

assign ap_sync_channel_write_feat_arr_8 = ((feat_arr_8_full_n & ap_channel_done_feat_arr_8) | ap_sync_reg_channel_write_feat_arr_8);

assign ap_sync_channel_write_hash_arr = ((hash_arr_full_n & ap_channel_done_hash_arr) | ap_sync_reg_channel_write_hash_arr);

assign ap_sync_channel_write_hash_arr_1 = ((hash_arr_1_full_n & ap_channel_done_hash_arr_1) | ap_sync_reg_channel_write_hash_arr_1);

assign ap_sync_channel_write_hash_arr_10 = ((hash_arr_10_full_n & ap_channel_done_hash_arr_10) | ap_sync_reg_channel_write_hash_arr_10);

assign ap_sync_channel_write_hash_arr_2 = ((hash_arr_2_full_n & ap_channel_done_hash_arr_2) | ap_sync_reg_channel_write_hash_arr_2);

assign ap_sync_channel_write_hash_arr_3 = ((hash_arr_3_full_n & ap_channel_done_hash_arr_3) | ap_sync_reg_channel_write_hash_arr_3);

assign ap_sync_channel_write_hash_arr_4 = ((hash_arr_4_full_n & ap_channel_done_hash_arr_4) | ap_sync_reg_channel_write_hash_arr_4);

assign ap_sync_channel_write_hash_arr_5 = ((hash_arr_5_full_n & ap_channel_done_hash_arr_5) | ap_sync_reg_channel_write_hash_arr_5);

assign ap_sync_channel_write_hash_arr_6 = ((hash_arr_6_full_n & ap_channel_done_hash_arr_6) | ap_sync_reg_channel_write_hash_arr_6);

assign ap_sync_channel_write_hash_arr_7 = ((hash_arr_7_full_n & ap_channel_done_hash_arr_7) | ap_sync_reg_channel_write_hash_arr_7);

assign ap_sync_channel_write_hash_arr_8 = ((hash_arr_8_full_n & ap_channel_done_hash_arr_8) | ap_sync_reg_channel_write_hash_arr_8);

assign ap_sync_channel_write_hash_arr_9 = ((hash_arr_9_full_n & ap_channel_done_hash_arr_9) | ap_sync_reg_channel_write_hash_arr_9);

assign ap_sync_channel_write_newret21 = ((newret21_full_n & ap_channel_done_newret21) | ap_sync_reg_channel_write_newret21);

assign layer2_out_0 = Block_entry17_proc_U0_layer2_out_0;

assign layer2_out_0_ap_vld = Block_entry17_proc_U0_layer2_out_0_ap_vld;

assign sparse_compute_U0_ap_continue = feat_out_channel_full_n;

assign sparse_compute_U0_ap_start = (newret21_empty_n & hash_arr_empty_n & hash_arr_9_empty_n & hash_arr_8_empty_n & hash_arr_7_empty_n & hash_arr_6_empty_n & hash_arr_5_empty_n & hash_arr_4_empty_n & hash_arr_3_empty_n & hash_arr_2_empty_n & hash_arr_1_empty_n & hash_arr_10_empty_n & feat_arr_empty_n & feat_arr_8_empty_n & feat_arr_7_empty_n & feat_arr_6_empty_n & feat_arr_5_empty_n & feat_arr_4_empty_n & feat_arr_3_empty_n & feat_arr_2_empty_n & feat_arr_1_empty_n);

assign sparse_input_U0_ap_continue = (ap_sync_channel_write_newret21 & ap_sync_channel_write_hash_arr_9 & ap_sync_channel_write_hash_arr_8 & ap_sync_channel_write_hash_arr_7 & ap_sync_channel_write_hash_arr_6 & ap_sync_channel_write_hash_arr_5 & ap_sync_channel_write_hash_arr_4 & ap_sync_channel_write_hash_arr_3 & ap_sync_channel_write_hash_arr_2 & ap_sync_channel_write_hash_arr_10 & ap_sync_channel_write_hash_arr_1 & ap_sync_channel_write_hash_arr & ap_sync_channel_write_feat_arr_8 & ap_sync_channel_write_feat_arr_7 & ap_sync_channel_write_feat_arr_6 & ap_sync_channel_write_feat_arr_5 & ap_sync_channel_write_feat_arr_4 & ap_sync_channel_write_feat_arr_3 & ap_sync_channel_write_feat_arr_2 & ap_sync_channel_write_feat_arr_1 & ap_sync_channel_write_feat_arr);

assign sparse_input_U0_ap_start = ap_start;

endmodule //model_test
